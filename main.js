const prompts = require('prompts');
const { ethers } = require('ethers');
const colors = require('colors');
const config = require('./config');
const walletUtils = require('./utils/wallet-utils');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è
async function checkWalletBalance(privateKey, proxy) {
    try {
        const provider = new ethers.providers.JsonRpcProvider({
            url: config.RPC_URL,
            headers: {
                'Proxy-Authorization': `Basic ${Buffer.from(
                    proxy.split('@')[0]
                ).toString('base64')}`,
            },
        });

        const wallet = new ethers.Wallet(privateKey, provider);
        const balance = await wallet.getBalance();
        
        return {
            wallet,
            provider,
            address: wallet.address,
            balance,
            hasEnoughBalance: balance.gte(ethers.utils.parseEther(config.MIN_BALANCE))
        };
    } catch (error) {
        console.error(`Error checking wallet balance: ${error.message}`.red);
        return {
            address: 'Unknown',
            balance: ethers.BigNumber.from(0),
            hasEnoughBalance: false
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –º–æ–¥—É–ª—ñ–≤ —É –≤–∏–ø–∞–¥–∫–æ–≤–æ–º—É –ø–æ—Ä—è–¥–∫—É
async function runModulesInRandomOrder(wallet, provider, proxy, moduleCount) {
    // –ú–∞—Å–∏–≤ –º–æ–¥—É–ª—ñ–≤
    const modules = [
        { name: 'Rubic Swap', run: async () => await require('./scripts/rubic-multi').runSwap(wallet) },
        { name: 'Magma Staking', run: async () => await require('./scripts/magma-multi').runStaking(wallet) },
        { name: 'Izumi Swap', run: async () => await require('./scripts/izumi-multi').runSwap(wallet) },
        { name: 'aPriori Staking', run: async () => await require('./scripts/apriori-multi').runStaking(wallet) },
        { name: 'MagicEden NFT Mint', run: async () => await require('./scripts/magiceden-mint').runMint(wallet) },
        { name: 'Nad Domains Registration', run: async () => await require('./scripts/nad-domains').runDomainRegistration(wallet) }
    ];

    // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –º–∞—Å–∏–≤ –º–æ–¥—É–ª—ñ–≤
    const selectedModules = walletUtils.shuffleArray([...modules]);
    
    // –í–∏–±–∏—Ä–∞—î–º–æ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤ (–∞–±–æ –≤—Å—ñ, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —î)
    const modulesToRun = selectedModules.slice(0, Math.min(moduleCount, modules.length));

    console.log(`\n${colors.cyan(`–ü–æ—á–∏–Ω–∞—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –≥–∞–º–∞–Ω—Ü—è ${walletUtils.formatAddress(wallet.address)} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ ${proxy.split('@')[1] || proxy}`)}`);
    console.log(`${colors.green(`–ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è: ${walletUtils.formatNumber(ethers.utils.formatEther(await wallet.getBalance()))} MON`)}`);
    console.log(`${colors.yellow(`–ó–∞–ø—É—Å–∫–∞—î–º–æ ${modulesToRun.length} –º–æ–¥—É–ª—ñ–≤: ${modulesToRun.map(m => m.name).join(' ‚Üí ')}`)}`);

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ –º–æ–¥—É–ª—ñ –ø–æ —á–µ—Ä–∑—ñ
    for (const module of modulesToRun) {
        console.log(`\n${colors.magenta(`–ó–∞–ø—É—Å–∫–∞—î–º–æ ${module.name}...`)}`);
        await module.run();
        console.log(`${colors.green(`${module.name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`)}`);
        
        // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –º–æ–¥—É–ª—è–º–∏
        if (modulesToRun.indexOf(module) < modulesToRun.length - 1) {
            const delay = Math.floor(Math.random() * (config.DELAYS.MAX_DELAY - config.DELAYS.MIN_DELAY) * 1000) + config.DELAYS.MIN_DELAY * 1000;
            console.log(`${colors.yellow(`–û—á—ñ–∫—É—î–º–æ ${Math.round(delay / 1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –º–æ–¥—É–ª–µ–º...`)}`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    console.log(colors.bold.green('=== –ó–ê–ü–£–°–ö –ú–û–î–£–õ–Ü–í –î–õ–Ø –í–°–Ü–• –ì–ê–ú–ê–ù–¶–Ü–í ==='));
    const date = new Date();
    console.log(`–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`);
    console.log(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${config.MIN_BALANCE} MON`);
    console.log(`RPC URL: ${config.RPC_URL}`);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ (–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–º—ñ—à–∞–Ω—ñ)
    const { wallets, proxies } = walletUtils.getWallets(config);
    
    if (wallets.length === 0) {
        console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó'.red);
        return;
    }
    
    console.log(`\n‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω ${wallets.length} –≥–∞–º–∞–Ω—Ü—ñ–≤...`);
    
    const walletResults = [];
    const walletKeyMap = {}; // –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –º—ñ–∂ –∞–¥—Ä–µ—Å–æ—é —Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º –∫–ª—é—á–µ–º
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤
    for (let i = 0; i < wallets.length; i++) {
        const privateKey = wallets[i];
        const proxy = proxies[i % proxies.length];
        
        const result = await checkWalletBalance(privateKey, proxy);
        walletResults.push({ ...result, privateKey, proxy });
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ –∞–¥—Ä–µ—Å–æ—é —ñ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º –∫–ª—é—á–µ–º
        walletKeyMap[result.address] = privateKey;
        
        console.log(`–ì–∞–º–∞–Ω–µ—Ü—å ${walletUtils.formatAddress(result.address)}: ${walletUtils.formatNumber(ethers.utils.formatEther(result.balance))} MON - ${result.hasEnoughBalance ? '–î–û–°–¢–ê–¢–ù–¨–û'.green : '–ù–ï–î–û–°–¢–ê–¢–ù–¨–û'.red}`);
        
        // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (config.PRIVACY && config.PRIVACY.RANDOM_DELAYS && i < wallets.length - 1) {
            await walletUtils.randomDelay(300, 1000);
        }
    }

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º
    const validWallets = walletResults.filter(w => w.hasEnoughBalance);
    
    console.log(`\n${colors.yellow(`–ó–Ω–∞–π–¥–µ–Ω–æ ${validWallets.length} –∑ ${wallets.length} –≥–∞–º–∞–Ω—Ü—ñ–≤ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º`)}`);
    
    if (validWallets.length === 0) {
        console.log('‚ùå –ù–µ–º–∞—î –≥–∞–º–∞–Ω—Ü—ñ–≤ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è...'.red);
        return;
    }

    // –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏
    const response = await prompts({
        type: 'confirm',
        name: 'continue',
        message: `–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ ${validWallets.length} –≥–∞–º–∞–Ω—Ü—è–º–∏?`,
        initial: true
    });

    if (!response.continue) {
        console.log('üõë –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è...'.yellow);
        return;
    }
    
    // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É
    const moduleResponse = await prompts({
        type: 'select',
        name: 'moduleCount',
        message: '–°–∫—ñ–ª—å–∫–∏ –º–æ–¥—É–ª—ñ–≤ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è?',
        choices: [
            { title: '–í–∏–ø–∞–¥–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (1-6)', value: 0 },
            { title: '1 –º–æ–¥—É–ª—å', value: 1 },
            { title: '2 –º–æ–¥—É–ª—ñ', value: 2 },
            { title: '3 –º–æ–¥—É–ª—ñ', value: 3 },
            { title: '4 –º–æ–¥—É–ª—ñ', value: 4 },
            { title: '5 –º–æ–¥—É–ª—ñ–≤', value: 5 },
            { title: '–í—Å—ñ –º–æ–¥—É–ª—ñ (6)', value: 6 }
        ],
        initial: 0
    });
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–¥—É–ª—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É
    let moduleCount = moduleResponse.moduleCount;
    if (moduleCount === 0) {
        // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –≥–µ–Ω–µ—Ä—É—î–º–æ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 6
        moduleCount = Math.floor(Math.random() * 6) + 1;
        console.log(`üé≤ ${colors.cyan(`–í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±—Ä–∞–Ω–æ ${moduleCount} –º–æ–¥—É–ª—ñ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É`)}`);
    }

    // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—Ä–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è
    let shuffledValidWallets = [...validWallets];
    if (config.PRIVACY && config.PRIVACY.SHUFFLE_WALLETS) {
        const shuffleResponse = await prompts({
            type: 'confirm',
            name: 'shuffle',
            message: '–ü–µ—Ä–µ–º—ñ—à–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤ —â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º?',
            initial: true
        });

        if (shuffleResponse.shuffle) {
            shuffledValidWallets = walletUtils.shuffleArray(validWallets);
            console.log(`üîÄ ${colors.cyan('–ü–æ—Ä—è–¥–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤ –ø–µ—Ä–µ–º—ñ—à–∞–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ')}`);
        }
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–¥—É–ª—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º
    for (const walletData of shuffledValidWallets) {
        await runModulesInRandomOrder(walletData.wallet, walletData.provider, walletData.proxy, moduleCount);
        
        // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
        if (shuffledValidWallets.indexOf(walletData) < shuffledValidWallets.length - 1) {
            const delay = Math.floor(Math.random() * (config.DELAYS.MAX_DELAY - config.DELAYS.MIN_DELAY) * 1000) + config.DELAYS.MIN_DELAY * 1000;
            console.log(`\n${colors.yellow(`–û—á—ñ–∫—É—î–º–æ ${Math.round(delay / 1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –≥–∞–º–∞–Ω—Ü–µ–º...`)}`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }

    console.log(`\n${colors.bold.green('–í—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')}`);
}

main().catch((error) => {
    console.error('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:', error);
});
