require('dotenv').config();
const { ethers } = require('ethers');
const colors = require('colors');
const fs = require('fs');
const config = require('../config');

const RPC_URL = config.RPC_URL;
const EXPLORER_URL = config.EXPLORER_URL;
const WMON_CONTRACT = config.CONTRACTS.WMON;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ min —Ç–∞ max —Å–µ–∫—É–Ω–¥
function getRandomDelay(min = config.DELAYS.MIN_DELAY, max = config.DELAYS.MAX_DELAY) {
  return Math.floor(Math.random() * (max - min + 1) + min) * 1000;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞—Ç—Ä–∏–º–∫—É
async function delay(min = config.DELAYS.MIN_DELAY, max = config.DELAYS.MAX_DELAY) {
  const delayTime = getRandomDelay(min, max);
  console.log(`‚è≥ Waiting for ${delayTime / 1000} seconds...`.yellow);
  await sleep(delayTime);
  console.log(`‚úÖ Delay completed`.green);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Å—É–º–∏ MON
function getRandomAmount() {
  const min = config.AMOUNTS.MIN_AMOUNT;
  const max = config.AMOUNTS.MAX_AMOUNT;
  const randomAmount = Math.random() * (max - min) + min;
  return ethers.utils.parseEther(randomAmount.toFixed(4));
}

// –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É Azaar DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ (–ø—Ä–∏–∫–ª–∞–¥)
const AZAAR_ROUTER_ADDRESS = '0x1234567890123456789012345678901234567890'; // –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É –∞–¥—Ä–µ—Å—É, –∫–æ–ª–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞

// –°–ø—Ä–æ—â–µ–Ω–∏–π ABI –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Azaar DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–º
const AZAAR_ROUTER_ABI = [
  'function getAmountsOut(uint amountIn, address[] memory path) public view returns (uint[] memory amounts)',
  'function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)',
  'function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts)',
  'function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)'
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É –æ–±–º—ñ–Ω—É —á–µ—Ä–µ–∑ Azaar
async function checkBestRoute(wallet, amountIn, fromToken, toToken) {
  try {
    console.log(`üîç Checking best route for ${ethers.utils.formatEther(amountIn)} ${fromToken === WMON_CONTRACT ? 'WMON' : fromToken} to ${toToken === WMON_CONTRACT ? 'WMON' : toToken}...`.cyan);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä—ñ—ó –º–∏ –± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ API –∞–±–æ –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
    // –î–µ–º–æ-—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è:
    console.log(`üìä Found the best route through Azaar DEX Aggregator`.blue);
    console.log(`üí∞ Expected output: ${(ethers.utils.formatEther(amountIn) * 0.995).toFixed(4)} ${toToken === WMON_CONTRACT ? 'WMON' : toToken} (0.5% fee)`.yellow);
    
    return {
      success: true,
      outputAmount: amountIn.mul(995).div(1000), // –°–∏–º—É–ª—è—Ü—ñ—è 0.5% –∫–æ–º—ñ—Å—ñ—ó
      route: [fromToken, toToken]
    };
  } catch (error) {
    console.error('‚ùå Error checking best route:'.red, error);
    return { success: false };
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±–º—ñ–Ω—É —á–µ—Ä–µ–∑ Azaar DEX –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
async function executeSwap(wallet, amount, fromToken, toToken) {
  try {
    console.log(`üîÑ Executing swap through Azaar DEX Aggregator...`.magenta);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –º–∞—Ä—à—Ä—É—Ç
    const routeInfo = await checkBestRoute(wallet, amount, fromToken, toToken);
    if (!routeInfo.success) {
      throw new Error('Failed to find optimal route');
    }
    
    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
    const router = new ethers.Contract(
      AZAAR_ROUTER_ADDRESS,
      AZAAR_ROUTER_ABI,
      wallet
    );
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const deadline = Math.floor(Date.now() / 1000) + 60 * 20; // 20 —Ö–≤–∏–ª–∏–Ω
    const slippage = 0.5; // 0.5% –¥–æ–ø—É—Å—Ç–∏–º–µ –ø—Ä–æ—Å–∫–æ–≤–∑—É–≤–∞–Ω–Ω—è
    const amountOutMin = routeInfo.outputAmount.mul(1000 - Math.floor(slippage * 10)).div(1000);
    
    let tx;
    
    // –û–±–º—ñ–Ω MON -> Token (MON -> WMON -> Token)
    if (fromToken === WMON_CONTRACT) {
      console.log(`üí∏ Swapping ${ethers.utils.formatEther(amount)} WMON to Token...`.magenta);
      
      // –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ö–≤–∞–ª–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è WMON –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
      const wmonContract = new ethers.Contract(
        WMON_CONTRACT,
        ['function approve(address spender, uint256 amount) public returns (bool)'],
        wallet
      );
      
      console.log(`üîë Approving WMON for Azaar DEX Router...`.yellow);
      const approveTx = await wmonContract.approve(
        AZAAR_ROUTER_ADDRESS, 
        amount,
        { gasLimit: config.GAS.DEFAULT_GAS_LIMIT }
      );
      console.log(`‚û°Ô∏è  Approval transaction sent: ${config.EXPLORER_URL}${approveTx.hash}`.yellow);
      await approveTx.wait();
      
      // –í–∏–∫–æ–Ω—É—î–º–æ –æ–±–º—ñ–Ω
      tx = await router.swapExactTokensForTokens(
        amount,
        amountOutMin,
        routeInfo.route,
        wallet.address,
        deadline,
        { gasLimit: config.GAS.DEFAULT_GAS_LIMIT }
      );
    } 
    // –û–±–º—ñ–Ω Token -> MON (Token -> WMON -> MON)
    else if (toToken === WMON_CONTRACT) {
      console.log(`üí∏ Swapping Token to ${ethers.utils.formatEther(amount)} WMON...`.magenta);
      
      // –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É —Å–ø—Ä–æ—Å—Ç–∏–º–æ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –æ–±–º—ñ–Ω WMON -> WMON
      tx = await router.swapExactTokensForTokens(
        amount,
        amountOutMin,
        routeInfo.route,
        wallet.address,
        deadline,
        { gasLimit: config.GAS.DEFAULT_GAS_LIMIT }
      );
    }
    
    console.log(`‚úîÔ∏è  Swap transaction successful`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${config.EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    
    return true;
  } catch (error) {
    console.error('‚ùå Error executing swap:'.red, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±–≥–æ—Ä—Ç–∞–Ω–Ω—è MON –≤ WMON (—è–∫ —É rubic-multi.js)
async function wrapMON(wallet, amount) {
  try {
    console.log(
      `üîÑ Wrapping ${ethers.utils.formatEther(amount)} MON into WMON...`.magenta
    );
    const contract = new ethers.Contract(
      config.CONTRACTS.WMON,
      [
        'function deposit() public payable',
        'function withdraw(uint256 amount) public',
      ],
      wallet
    );
    const tx = await contract.deposit({ 
      value: amount, 
      gasLimit: config.GAS.DEFAULT_GAS_LIMIT 
    });
    console.log(`‚úîÔ∏è  Wrap MON ‚Üí WMON successful`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${config.EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error('‚ùå Error wrapping MON:'.red, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è WMON –Ω–∞–∑–∞–¥ –≤ MON (—è–∫ —É rubic-multi.js)
async function unwrapMON(wallet, amount) {
  try {
    console.log(
      `üîÑ Unwrapping ${ethers.utils.formatEther(amount)} WMON back to MON...`
        .magenta
    );
    const contract = new ethers.Contract(
      config.CONTRACTS.WMON,
      [
        'function deposit() public payable',
        'function withdraw(uint256 amount) public',
      ],
      wallet
    );
    const tx = await contract.withdraw(amount, { 
      gasLimit: config.GAS.DEFAULT_GAS_LIMIT 
    });
    console.log(`‚úîÔ∏è  Unwrap WMON ‚Üí MON successful`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${config.EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error('‚ùå Error unwrapping WMON:'.red, error);
    return false;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±–º—ñ–Ω—É —á–µ—Ä–µ–∑ Azaar
async function runSwap(wallet) {
  try {
    const randomAmount = getRandomAmount();
    console.log(`Starting Azaar DEX aggregator swap operation:`.magenta);
    
    // –û–±–≥–æ—Ä—Ç–∞—î–º–æ MON –≤ WMON
    const wrapSuccess = await wrapMON(wallet, randomAmount);
    
    if (wrapSuccess) {
      // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
      await delay(); 
      
      // –í–∏–∫–æ–Ω—É—î–º–æ –æ–±–º—ñ–Ω WMON -> WMON (—Å–∏–º—É–ª—è—Ü—ñ—è –æ–±–º—ñ–Ω—É —Ç–æ–∫–µ–Ω—ñ–≤)
      const swapSuccess = await executeSwap(wallet, randomAmount, WMON_CONTRACT, WMON_CONTRACT);
      
      if (swapSuccess) {
        // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
        await delay(); 
        
        // –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ WMON –Ω–∞–∑–∞–¥ –≤ MON
        await unwrapMON(wallet, randomAmount);
      }
    }
    
    console.log(`Azaar DEX aggregator swap operation completed`.green);
    return true;
  } catch (error) {
    console.error(`‚ùå Azaar DEX aggregator swap operation failed: ${error.message}`.red);
    return false;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ
module.exports = {
  runSwap
};

// –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É, –≤–∏–∫–æ–Ω—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
if (require.main === module) {
  // –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const wallets = config.WALLETS;
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–∫—Å—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const proxies = config.PROXIES;

  if (wallets.length === 0 || proxies.length === 0) {
    console.error('Please ensure WALLETS and PROXIES are configured in config.js'.red);
    process.exit(1);
  }

  async function main() {
    console.log(`Starting Azaar DEX aggregator operations for all accounts...`);

    // –í–∏–∫–æ–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
    for (let i = 0; i < wallets.length; i++) {
      const privateKey = wallets[i].trim();
      const proxy = proxies[i % proxies.length].trim();

      const provider = new ethers.providers.JsonRpcProvider({
        url: RPC_URL,
        headers: {
          'Proxy-Authorization': `Basic ${Buffer.from(
            proxy.split('@')[0]
          ).toString('base64')}`,
        },
      });

      const wallet = new ethers.Wallet(privateKey, provider);

      console.log(
        `\nStarting operations for account ${wallet.address} using proxy ${proxy}`
          .cyan
      );

      await runSwap(wallet);
      
      // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      if (i < wallets.length - 1) {
        console.log(`\nMoving to next wallet...`.cyan);
        await delay(); // –ó–∞—Ç—Ä–∏–º–∫–∞ –∑–≥—ñ–¥–Ω–æ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
      }
    }

    console.log(`\nAll operations completed successfully!`.green.bold);
  }

  main().catch((error) => {
    console.error('Error occurred:', error);
  });
} 