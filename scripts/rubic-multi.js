require('dotenv').config();
const { ethers } = require('ethers');
const colors = require('colors');
const fs = require('fs');
const config = require('../config');

const RPC_URL = config.RPC_URL;
const EXPLORER_URL = config.EXPLORER_URL;
const WMON_CONTRACT = config.CONTRACTS.WMON;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ min —Ç–∞ max —Å–µ–∫—É–Ω–¥
function getRandomDelay(min = config.DELAYS.MIN_DELAY, max = config.DELAYS.MAX_DELAY) {
  return Math.floor(Math.random() * (max - min + 1) + min) * 1000;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞—Ç—Ä–∏–º–∫—É
async function delay(min = config.DELAYS.MIN_DELAY, max = config.DELAYS.MAX_DELAY) {
  const delayTime = getRandomDelay(min, max);
  console.log(`‚è≥ Waiting for ${delayTime / 1000} seconds...`.yellow);
  await sleep(delayTime);
  console.log(`‚úÖ Delay completed`.green);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Å—É–º–∏ MON
function getRandomAmount() {
  const min = config.AMOUNTS.MIN_AMOUNT;
  const max = config.AMOUNTS.MAX_AMOUNT;
  const randomAmount = Math.random() * (max - min) + min;
  return ethers.utils.parseEther(randomAmount.toFixed(4));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±–≥–æ—Ä—Ç–∞–Ω–Ω—è MON –≤ WMON
async function wrapMON(wallet, amount) {
  try {
    console.log(
      `üîÑ Wrapping ${ethers.utils.formatEther(amount)} MON into WMON...`.magenta
    );
    const contract = new ethers.Contract(
      config.CONTRACTS.WMON,
      [
        'function deposit() public payable',
        'function withdraw(uint256 amount) public',
      ],
      wallet
    );
    const tx = await contract.deposit({ 
      value: amount, 
      gasLimit: config.GAS.DEFAULT_GAS_LIMIT 
    });
    console.log(`‚úîÔ∏è  Wrap MON ‚Üí WMON successful`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${config.EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error('‚ùå Error wrapping MON:'.red, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è WMON –Ω–∞–∑–∞–¥ –≤ MON
async function unwrapMON(wallet, amount) {
  try {
    console.log(
      `üîÑ Unwrapping ${ethers.utils.formatEther(amount)} WMON back to MON...`
        .magenta
    );
    const contract = new ethers.Contract(
      config.CONTRACTS.WMON,
      [
        'function deposit() public payable',
        'function withdraw(uint256 amount) public',
      ],
      wallet
    );
    const tx = await contract.withdraw(amount, { 
      gasLimit: config.GAS.DEFAULT_GAS_LIMIT 
    });
    console.log(`‚úîÔ∏è  Unwrap WMON ‚Üí MON successful`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${config.EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error('‚ùå Error unwrapping WMON:'.red, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –æ–±–º—ñ–Ω—É
async function runSwap(wallet) {
  try {
    const randomAmount = getRandomAmount();
    console.log(`Starting Rubic swap operation:`.magenta);
    
    // –û–±–≥–æ—Ä—Ç–∞—î–º–æ MON –≤ WMON
    const wrapSuccess = await wrapMON(wallet, randomAmount);
    
    // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
    if (wrapSuccess) {
      await delay(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
      await unwrapMON(wallet, randomAmount);
    }
    
    console.log(`Rubic swap operation completed`.green);
    return true;
  } catch (error) {
    console.error(`‚ùå Rubic swap operation failed: ${error.message}`.red);
    return false;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ
module.exports = {
  runSwap
};

// –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É, –≤–∏–∫–æ–Ω—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
if (require.main === module) {
  // –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const wallets = config.WALLETS;
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–∫—Å—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const proxies = config.PROXIES;

  if (wallets.length === 0 || proxies.length === 0) {
    console.error('Please ensure WALLETS and PROXIES are configured in config.js'.red);
    process.exit(1);
  }

  async function main() {
    console.log(`Starting swap operations for all accounts...`);

    // –í–∏–∫–æ–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
    for (let i = 0; i < wallets.length; i++) {
      const privateKey = wallets[i].trim();
      const proxy = proxies[i % proxies.length].trim();

      const provider = new ethers.providers.JsonRpcProvider({
        url: RPC_URL,
        headers: {
          'Proxy-Authorization': `Basic ${Buffer.from(
            proxy.split('@')[0]
          ).toString('base64')}`,
        },
      });

      const wallet = new ethers.Wallet(privateKey, provider);

      console.log(
        `\nStarting operations for account ${wallet.address} using proxy ${proxy}`
          .cyan
      );

      await runSwap(wallet);
      
      // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      if (i < wallets.length - 1) {
        console.log(`\nMoving to next wallet...`.cyan);
        await delay(); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1-10 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      }
    }

    console.log(`\nAll operations completed successfully!`.green.bold);
  }

  main().catch((error) => {
    console.error('Error occurred:', error);
  });
}
