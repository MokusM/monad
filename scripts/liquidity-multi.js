require('dotenv').config();
const { ethers } = require('ethers');
const colors = require('colors');
const fs = require('fs');
const axios = require('axios');

const RPC_URL = 'https://testnet-rpc.monad.xyz/';
const EXPLORER_URL = 'https://testnet.monadexplorer.com/tx/';
const WMON_CONTRACT = '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701';
const UNISWAP_ROUTER = '0x5615CDAb10dc425a742d643d949a7F474C01abc4'; // Uniswap Router –Ω–∞ Monad —Ç–µ—Å—Ç–Ω–µ—Ç—ñ
const gasLimit = 800000;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ min —Ç–∞ max —Å–µ–∫—É–Ω–¥
function getRandomDelay(min = 60, max = 600) {
  return Math.floor(Math.random() * (max - min + 1) + min) * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞—Ç—Ä–∏–º–∫—É
async function delay(min = 60, max = 600) {
  const delayTime = getRandomDelay(min, max);
  console.log(`‚è≥ Waiting for ${delayTime / 1000} seconds...`.yellow);
  await sleep(delayTime);
  console.log(`‚úÖ Delay completed`.green);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Å—É–º–∏ MON –º—ñ–∂ 0.01 —Ç–∞ 0.05
function getRandomAmount() {
  const min = 0.01;
  const max = 0.05;
  const randomAmount = Math.random() * (max - min) + min;
  return ethers.utils.parseEther(randomAmount.toFixed(4));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±–≥–æ—Ä—Ç–∞–Ω–Ω—è MON –≤ WMON
async function wrapMON(wallet, amount) {
  try {
    console.log(
      `üîÑ Wrapping ${ethers.utils.formatEther(amount)} MON into WMON...`.magenta
    );
    const contract = new ethers.Contract(
      WMON_CONTRACT,
      [
        'function deposit() public payable',
        'function withdraw(uint256 amount) public',
      ],
      wallet
    );
    const tx = await contract.deposit({ value: amount, gasLimit: 500000 });
    console.log(`‚úîÔ∏è  Wrap MON ‚Üí WMON successful`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error('‚ùå Error wrapping MON:'.red, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –Ω–∞–¥–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
async function approveToken(wallet, tokenAddress, spenderAddress, amount) {
  try {
    console.log(`üîÑ Approving ${ethers.utils.formatEther(amount)} tokens for DEX...`.magenta);
    const tokenContract = new ethers.Contract(
      tokenAddress,
      [
        'function approve(address spender, uint256 amount) public returns (bool)',
        'function allowance(address owner, address spender) public view returns (uint256)',
      ],
      wallet
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π allowance
    const currentAllowance = await tokenContract.allowance(wallet.address, spenderAddress);
    if (currentAllowance.gte(amount)) {
      console.log(`‚úîÔ∏è  Token already approved`.green);
      return true;
    }

    const tx = await tokenContract.approve(spenderAddress, amount, { gasLimit });
    console.log(`‚úîÔ∏è  Token approval successful`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error('‚ùå Error approving token:'.red, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≤ –ø—É–ª WMON/ETH –Ω–∞ Uniswap
async function addLiquidityWMONETH(wallet, wmonAmount, ethAmount) {
  try {
    console.log(
      `üîÑ Adding liquidity to Uniswap: ${ethers.utils.formatEther(wmonAmount)} WMON and ${ethers.utils.formatEther(ethAmount)} MON...`.magenta
    );

    // –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥–∞—î–º–æ –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è WMON
    await approveToken(wallet, WMON_CONTRACT, UNISWAP_ROUTER, wmonAmount);
    
    // –î–æ–¥–∞—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å
    const uniswapRouter = new ethers.Contract(
      UNISWAP_ROUTER,
      [
        'function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity)',
      ],
      wallet
    );

    const deadline = Math.floor(Date.now() / 1000) + 60 * 20; // 20 —Ö–≤–∏–ª–∏–Ω
    const slippage = 50; // 0.5%
    const amountTokenMin = wmonAmount.mul(10000 - slippage).div(10000);
    const amountETHMin = ethAmount.mul(10000 - slippage).div(10000);

    const tx = await uniswapRouter.addLiquidityETH(
      WMON_CONTRACT,
      wmonAmount,
      amountTokenMin,
      amountETHMin,
      wallet.address,
      deadline,
      { value: ethAmount, gasLimit }
    );

    console.log(`‚úîÔ∏è  Liquidity added successfully`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error('‚ùå Error adding liquidity:'.red, error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
async function runLiquidityProvision(wallet) {
  try {
    console.log(`Starting liquidity provision operation:`.magenta);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Å—É–º—É MON –¥–ª—è –æ–±–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤ WMON
    const wmonAmount = getRandomAmount();
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Å—É–º—É MON –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —è–∫ ETH
    const ethAmount = getRandomAmount();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ MON –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ
    const balance = await wallet.getBalance();
    const requiredBalance = wmonAmount.add(ethAmount).add(ethers.utils.parseEther('0.01')); // –î–æ–¥–∞—î–º–æ 0.01 MON –¥–ª—è –≥–∞–∑—É
    
    if (balance.lt(requiredBalance)) {
      console.log(`‚ùå Insufficient MON balance. Required: ${ethers.utils.formatEther(requiredBalance)} MON, Available: ${ethers.utils.formatEther(balance)} MON`.red);
      return false;
    }
    
    // –û–±–≥–æ—Ä—Ç–∞—î–º–æ MON –≤ WMON
    await wrapMON(wallet, wmonAmount);
    
    // –î–æ–¥–∞—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å WMON/ETH
    await addLiquidityWMONETH(wallet, wmonAmount, ethAmount);
    
    console.log(`Liquidity provision operation completed`.green);
    return true;
  } catch (error) {
    console.error(`‚ùå Liquidity provision operation failed: ${error.message}`.red);
    return false;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ
module.exports = {
  runLiquidityProvision
};

// –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É, –≤–∏–∫–æ–Ω—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
if (require.main === module) {
  // –ß–∏—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∫–ª—é—á—ñ–≤ –∑ —Ñ–∞–π–ª—É wallet.txt
  const wallets = fs
    .readFileSync('wallet.txt', 'utf8')
    .split('\n')
    .filter(Boolean);

  // –ß–∏—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å—ñ –∑ —Ñ–∞–π–ª—É proxy.txt
  const proxies = fs
    .readFileSync('proxy.txt', 'utf8')
    .split('\n')
    .filter(Boolean);

  if (wallets.length === 0 || proxies.length === 0) {
    console.error('Please ensure wallet.txt and proxy.txt are not empty.'.red);
    process.exit(1);
  }

  async function main() {
    console.log(`Starting liquidity provision operations for all accounts...`);

    // –í–∏–∫–æ–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
    for (let i = 0; i < wallets.length; i++) {
      const privateKey = wallets[i].trim();
      const proxy = proxies[i % proxies.length].trim();

      const provider = new ethers.providers.JsonRpcProvider({
        url: RPC_URL,
        headers: {
          'Proxy-Authorization': `Basic ${Buffer.from(
            proxy.split('@')[0]
          ).toString('base64')}`,
        },
      });

      const wallet = new ethers.Wallet(privateKey, provider);

      console.log(
        `\nStarting operations for account ${wallet.address} using proxy ${proxy}`
          .cyan
      );

      await runLiquidityProvision(wallet);
      
      // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      if (i < wallets.length - 1) {
        console.log(`\nMoving to next wallet...`.cyan);
        await delay(60, 600); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1-10 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      }
    }

    console.log(`\nAll operations completed successfully!`.green.bold);
  }

  main().catch((error) => {
    console.error('Error occurred:', error);
  });
} 