/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –º–æ–¥—É–ª—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
 */

require('dotenv').config();
const { ethers } = require('ethers');
const colors = require('colors');
const config = require('../config');
const magicedenMint = require('./magiceden-mint');
const nadDomains = require('./nad-domains');

// –Ü–Ω–¥–µ–∫—Å –≥–∞–º–∞–Ω—Ü—è, —è–∫–∏–π –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å (0-9)
const WALLET_INDEX = 0;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∑ –ø—Ä–æ–∫—Å—ñ
function createProvider(proxy, rpcUrl = config.RPC_URL) {
  const proxyAuth = proxy.split('@')[0];
  
  return new ethers.providers.JsonRpcProvider({
    url: rpcUrl,
    headers: {
      'Proxy-Authorization': `Basic ${Buffer.from(proxyAuth).toString('base64')}`,
    },
    timeout: config.RPC_TIMEOUT || 30000
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ RPC-—Å–µ—Ä–≤–µ—Ä–∞–º–∏
async function switchRpcProvider(proxy) {
  const alternativeRpcUrls = config.ALTERNATIVE_RPC_URLS || [config.RPC_URL];
  
  for (const rpcUrl of alternativeRpcUrls) {
    console.log(`üîÑ Trying RPC: ${rpcUrl}`.yellow);
    
    try {
      const provider = createProvider(proxy, rpcUrl);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      await provider.getBlockNumber();
      console.log(`‚úÖ Connected to RPC: ${rpcUrl}`.green);
      
      return provider;
    } catch (error) {
      console.log(`‚ùå Failed to connect to RPC: ${rpcUrl}`.red);
    }
  }
  
  throw new Error('All RPC servers are unavailable');
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ —Ç–∞ –ø—Ä–æ–∫—Å—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    const wallets = config.WALLETS;
    const proxies = config.PROXIES;

    if (wallets.length === 0 || proxies.length === 0) {
      console.error('Please ensure WALLETS and PROXIES are configured in config.js'.red);
      process.exit(1);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ–Ω–¥–µ–∫—Å –≥–∞–º–∞–Ω—Ü—è –≤ –º–µ–∂–∞—Ö –º–∞—Å–∏–≤—É
    if (WALLET_INDEX < 0 || WALLET_INDEX >= wallets.length) {
      console.error(`Invalid wallet index: ${WALLET_INDEX}. Must be between 0 and ${wallets.length - 1}`.red);
      process.exit(1);
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á —Ç–∞ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
    const privateKey = wallets[WALLET_INDEX].trim();
    const proxy = proxies[WALLET_INDEX % proxies.length].trim();

    // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π RPC-—Å–µ—Ä–≤–µ—Ä
    let provider;
    try {
      provider = await switchRpcProvider(proxy);
    } catch (error) {
      console.error(`Failed to connect to any RPC server: ${error.message}`.red);
      process.exit(1);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å
    const wallet = new ethers.Wallet(privateKey, provider);

    console.log(`Starting operations for account ${wallet.address} using proxy ${proxy}`.cyan);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è
    const balance = await wallet.getBalance();
    console.log(`Current balance: ${ethers.utils.formatEther(balance)} MON`.cyan);

    // –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å—Ç–∏—Ç–∏
    console.log('\nSelect module to run:'.yellow);
    console.log('1. MagicEden NFT Mint'.cyan);
    console.log('2. Nad Domains Registration'.cyan);

    // –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ü—å–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ,
    // –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–¥—É–ª—å Nad Domains Registration
    console.log('\nRunning Nad Domains Registration module...'.green);
    
    // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    console.log('Waiting 5 seconds before starting...'.yellow);
    await sleep(5000);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —ñ–º'—è –¥–æ–º–µ–Ω—É (5-10 —Å–∏–º–≤–æ–ª—ñ–≤)
    const length = Math.floor(Math.random() * 6) + 5;
    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
    let domainName = '';
    
    for (let i = 0; i < length; i++) {
      domainName += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    
    console.log(`Generated random domain name: ${domainName}.nad`.cyan);
    
    // –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥–æ–º–µ–Ω –Ω–∞–ø—Ä—è–º—É, –±–µ–∑ –∑–∞–ø—É—Å–∫—É –≤—Å—å–æ–≥–æ –º–æ–¥—É–ª—è
    const registrationYears = 1;
    const success = await nadDomains.registerDomain(wallet, domainName, registrationYears, proxy);
    
    if (success) {
      console.log(`\n‚úÖ Domain ${domainName}.nad successfully registered!`.green.bold);
    } else {
      console.log(`\n‚ùå Failed to register domain ${domainName}.nad`.red);
    }

    console.log('\nOperation completed!'.green.bold);
  } catch (error) {
    console.error(`Error occurred: ${error.message}`.red);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
main(); 