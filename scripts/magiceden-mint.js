/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –º—ñ–Ω—Ç–∏–Ω–≥—É NFT –Ω–∞ MagicEden –≤ –º–µ—Ä–µ–∂—ñ Monad testnet
 * –ê–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é 0xStarLabs/StarLabs-Monad
 */

require('dotenv').config();
const { ethers } = require('ethers');
const colors = require('colors');
const config = require('../config');
const walletUtils = require('../utils/wallet-utils');

// –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏ NFT –Ω–∞ MagicEden
const NFT_CONTRACTS = [
  '0x4269cde9751237634d972026583bd39dff10b6f8', // 0.01 $MON
  '0xb3b63ea6ad288f74c1268a50640919fadae84454', // 0.01 $MON
  '0xbf5340ac35c0653e4f30a52bca8de137bb717b56', // 0.001 $MON
  '0x3941ae709a872cd14af1871c8442aa4cf0967e84', // 0.01 $MON
  '0x0fa3da91d4469dfd8c7a0cb13c47d90c8e88d5bd', // free
  '0x95d04e083255fe1b71d690791301831b6896d183', // free
];

// ABI –¥–ª—è –º—ñ–Ω—Ç–∏–Ω–≥—É NFT
const NFT_ABI = [
  'function mint(uint256 quantity) external payable',
  'function mintingFee() external view returns (uint256)',
  'function name() external view returns (string)',
  'function balanceOf(address owner) external view returns (uint256)',
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ min —Ç–∞ max —Å–µ–∫—É–Ω–¥
function getRandomDelay(min = config.DELAYS.MIN_DELAY, max = config.DELAYS.MAX_DELAY) {
  return Math.floor(Math.random() * (max - min + 1) + min) * 1000;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞—Ç—Ä–∏–º–∫—É
async function delay(min = config.DELAYS.MIN_DELAY, max = config.DELAYS.MAX_DELAY) {
  const delayTime = getRandomDelay(min, max);
  console.log(`‚è≥ Waiting for ${delayTime / 1000} seconds...`.yellow);
  await sleep(delayTime);
  console.log(`‚úÖ Delay completed`.green);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É NFT
function getRandomNFTContract() {
  const randomIndex = Math.floor(Math.random() * NFT_CONTRACTS.length);
  return NFT_CONTRACTS[randomIndex];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º—ñ–Ω—Ç–∏–Ω–≥—É NFT
async function mintNFT(wallet, nftContract, quantity = 1) {
  try {
    const contract = new ethers.Contract(nftContract, NFT_ABI, wallet);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ–ª–µ–∫—Ü—ñ—ó
    const name = await contract.name();
    console.log(`üñºÔ∏è Minting ${quantity} NFT from collection: ${name}`.magenta);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É –º—ñ–Ω—Ç–∏–Ω–≥—É
    let mintingFee;
    try {
      mintingFee = await contract.mintingFee();
      console.log(`üí∞ Minting fee: ${ethers.utils.formatEther(mintingFee)} MON`.cyan);
    } catch (error) {
      console.log(`üí∞ Minting fee not available, assuming free mint`.cyan);
      mintingFee = ethers.BigNumber.from(0);
    }
    
    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const tx = await contract.mint(quantity, {
      value: mintingFee.mul(quantity),
      gasLimit: 500000
    });
    
    console.log(`‚úîÔ∏è NFT mint transaction sent`.green.underline);
    console.log(`‚û°Ô∏è Transaction hash: ${tx.hash}`.yellow);
    
    // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const receipt = await tx.wait();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å NFT –ø—ñ—Å–ª—è –º—ñ–Ω—Ç–∏–Ω–≥—É
    const balance = await contract.balanceOf(wallet.address);
    
    console.log(`‚úÖ NFT mint successful! Current balance: ${balance.toString()} NFTs`.green);
    return true;
  } catch (error) {
    console.error(`‚ùå Error minting NFT:`.red, error.message);
    return false;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –º—ñ–Ω—Ç–∏–Ω–≥—É NFT
async function runMint(wallet) {
  try {
    console.log(`Starting MagicEden NFT minting operation:`.magenta);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç NFT
    const nftContract = getRandomNFTContract();
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å NFT –¥–ª—è –º—ñ–Ω—Ç–∏–Ω–≥—É (1-3)
    const quantity = Math.floor(Math.random() * 3) + 1;
    
    // –ú—ñ–Ω—Ç–∏–º–æ NFT
    await mintNFT(wallet, nftContract, quantity);
    
    console.log(`MagicEden NFT minting operation completed`.green);
    return true;
  } catch (error) {
    console.error(`‚ùå MagicEden NFT minting operation failed: ${error.message}`.red);
    return false;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ
module.exports = {
  runMint
};

// –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É, –≤–∏–∫–æ–Ω—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
if (require.main === module) {
  // –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const wallets = config.WALLETS;
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–∫—Å—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const proxies = config.PROXIES;

  if (wallets.length === 0 || proxies.length === 0) {
    console.error('Please ensure WALLETS and PROXIES are configured in config.js'.red);
    process.exit(1);
  }

  async function main() {
    console.log(`Starting MagicEden NFT minting operations for all accounts...`);

    // –í–∏–∫–æ–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
    for (let i = 0; i < wallets.length; i++) {
      const privateKey = wallets[i].trim();
      const proxy = proxies[i % proxies.length].trim();

      const provider = new ethers.providers.JsonRpcProvider({
        url: config.RPC_URL,
        headers: {
          'Proxy-Authorization': `Basic ${Buffer.from(
            proxy.split('@')[0]
          ).toString('base64')}`,
        },
      });

      const wallet = new ethers.Wallet(privateKey, provider);

      console.log(
        `\nStarting operations for account ${wallet.address} using proxy ${proxy}`
          .cyan
      );

      await runMint(wallet);
      
      // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      if (i < wallets.length - 1) {
        console.log(`\nMoving to next wallet...`.cyan);
        await delay(60, 600); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1-10 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      }
    }

    console.log(`\nAll operations completed successfully!`.green.bold);
  }

  main().catch((error) => {
    console.error('Error occurred:', error);
  });
} 