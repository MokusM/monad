/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ–º–µ–Ω—ñ–≤ –Ω–∞ Nad Domains –≤ –º–µ—Ä–µ–∂—ñ Monad testnet
 * –ê–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é 0xStarLabs/StarLabs-Monad
 */

require('dotenv').config();
const { ethers } = require('ethers');
const colors = require('colors');
const config = require('../config');
const walletUtils = require('../utils/wallet-utils');

// –ö–æ–Ω—Ç—Ä–∞–∫—Ç Nad Domains
const NAD_DOMAINS_CONTRACT = '0x2Cc8342d7c8BFf5A213857A90a6Bf5f557Ae2647';

// ABI –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ–º–µ–Ω—ñ–≤
const NAD_DOMAINS_ABI = [
  'function register(string memory name, uint256 duration) external payable',
  'function price(string memory name, uint256 duration) external view returns (uint256)',
  'function available(string memory name) external view returns (bool)',
  'function balanceOf(address owner) external view returns (uint256)',
  'function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256)',
  'function getName(uint256 tokenId) external view returns (string memory)'
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ min —Ç–∞ max —Å–µ–∫—É–Ω–¥
function getRandomDelay(min = config.DELAYS.MIN_DELAY, max = config.DELAYS.MAX_DELAY) {
  return Math.floor(Math.random() * (max - min + 1) + min) * 1000;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞—Ç—Ä–∏–º–∫—É
async function delay(min = config.DELAYS.MIN_DELAY, max = config.DELAYS.MAX_DELAY) {
  const delayTime = getRandomDelay(min, max);
  console.log(`‚è≥ Waiting for ${delayTime / 1000} seconds...`.yellow);
  await sleep(delayTime);
  console.log(`‚úÖ Delay completed`.green);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —ñ–º–µ–Ω—ñ –¥–æ–º–µ–Ω—É
function generateRandomDomainName(length = 8) {
  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –¥–æ–º–µ–Ω—É
async function checkDomainAvailability(contract, domainName) {
  try {
    const isAvailable = await contract.available(domainName);
    return isAvailable;
  } catch (error) {
    console.error(`‚ùå Error checking domain availability:`.red, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ–º–µ–Ω—É
async function getDomainPrice(contract, domainName, duration) {
  try {
    const price = await contract.price(domainName, duration);
    return price;
  } catch (error) {
    console.error(`‚ùå Error getting domain price:`.red, error.message);
    return ethers.BigNumber.from(0);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ–º–µ–Ω—É
async function registerDomain(wallet, domainName, duration = 365) {
  try {
    const contract = new ethers.Contract(NAD_DOMAINS_CONTRACT, NAD_DOMAINS_ABI, wallet);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –¥–æ–º–µ–Ω—É
    const isAvailable = await checkDomainAvailability(contract, domainName);
    if (!isAvailable) {
      console.log(`üî¥ Domain ${domainName}.nad is not available`.red);
      return false;
    }
    
    console.log(`üü¢ Domain ${domainName}.nad is available`.green);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    const price = await getDomainPrice(contract, domainName, duration);
    console.log(`üí∞ Registration price for ${duration} days: ${ethers.utils.formatEther(price)} MON`.cyan);
    
    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const tx = await contract.register(domainName, duration, {
      value: price,
      gasLimit: 500000
    });
    
    console.log(`‚úîÔ∏è Domain registration transaction sent`.green.underline);
    console.log(`‚û°Ô∏è Transaction hash: ${tx.hash}`.yellow);
    
    // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const receipt = await tx.wait();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –¥–æ–º–µ–Ω—ñ–≤ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    const balance = await contract.balanceOf(wallet.address);
    
    console.log(`‚úÖ Domain registration successful! Current balance: ${balance.toString()} domains`.green);
    
    // –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–æ–º–µ–Ω–∏
    if (balance.gt(0)) {
      const lastTokenId = await contract.tokenOfOwnerByIndex(wallet.address, balance.sub(1));
      const domainName = await contract.getName(lastTokenId);
      console.log(`üåê Last registered domain: ${domainName}.nad`.cyan);
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå Error registering domain:`.red, error.message);
    return false;
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ–º–µ–Ω—É
async function runDomainRegistration(wallet) {
  try {
    console.log(`Starting Nad Domains registration operation:`.magenta);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —ñ–º'—è –¥–æ–º–µ–Ω—É
    const domainName = generateRandomDomainName();
    console.log(`üåê Generated domain name: ${domainName}.nad`.cyan);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–≤—ñ–¥ 30 –¥–æ 365 –¥–Ω—ñ–≤)
    const duration = Math.floor(Math.random() * (365 - 30 + 1)) + 30;
    console.log(`‚è±Ô∏è Registration duration: ${duration} days`.cyan);
    
    // –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥–æ–º–µ–Ω
    await registerDomain(wallet, domainName, duration);
    
    console.log(`Nad Domains registration operation completed`.green);
    return true;
  } catch (error) {
    console.error(`‚ùå Nad Domains registration operation failed: ${error.message}`.red);
    return false;
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ
module.exports = {
  runDomainRegistration
};

// –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É, –≤–∏–∫–æ–Ω—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
if (require.main === module) {
  // –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const wallets = config.WALLETS;
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–∫—Å—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const proxies = config.PROXIES;

  if (wallets.length === 0 || proxies.length === 0) {
    console.error('Please ensure WALLETS and PROXIES are configured in config.js'.red);
    process.exit(1);
  }

  async function main() {
    console.log(`Starting Nad Domains registration operations for all accounts...`);

    // –í–∏–∫–æ–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
    for (let i = 0; i < wallets.length; i++) {
      const privateKey = wallets[i].trim();
      const proxy = proxies[i % proxies.length].trim();

      const provider = new ethers.providers.JsonRpcProvider({
        url: config.RPC_URL,
        headers: {
          'Proxy-Authorization': `Basic ${Buffer.from(
            proxy.split('@')[0]
          ).toString('base64')}`,
        },
      });

      const wallet = new ethers.Wallet(privateKey, provider);

      console.log(
        `\nStarting operations for account ${wallet.address} using proxy ${proxy}`
          .cyan
      );

      await runDomainRegistration(wallet);
      
      // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      if (i < wallets.length - 1) {
        console.log(`\nMoving to next wallet...`.cyan);
        await delay(60, 600); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1-10 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏
      }
    }

    console.log(`\nAll operations completed successfully!`.green.bold);
  }

  main().catch((error) => {
    console.error('Error occurred:', error);
  });
} 