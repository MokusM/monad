const { ethers } = require('ethers');
const colors = require('colors');
const config = require('./config');

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const WMON_CONTRACT = '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è
async function checkWalletBalance(privateKey, proxy, index) {
    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑ –ø—Ä–æ–∫—Å—ñ
        const provider = new ethers.providers.JsonRpcProvider({
            url: config.RPC_URL,
            headers: proxy ? {
                'Proxy-Authorization': `Basic ${Buffer.from(
                    proxy.split('@')[0]
                ).toString('base64')}`,
            } : {},
        });

        // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è
        const wallet = new ethers.Wallet(privateKey, provider);
        const address = wallet.address;
        
        console.log(`\n${colors.cyan('=')} –ì–∞–º–∞–Ω–µ—Ü—å #${index + 1}: ${colors.yellow(address)} ${colors.cyan('=')}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å MON
        const monBalance = await wallet.getBalance();
        console.log(`üí∞ ${colors.cyan('MON –±–∞–ª–∞–Ω—Å:')} ${colors.green(formatNumber(monBalance))} MON`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å WMON –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        let wmonBalance = ethers.BigNumber.from(0);
        try {
            const wmonContract = new ethers.Contract(
                WMON_CONTRACT,
                ['function balanceOf(address owner) view returns (uint256)'],
                provider
            );
            
            wmonBalance = await wmonContract.balanceOf(address);
            console.log(`üí∞ ${colors.cyan('WMON –±–∞–ª–∞–Ω—Å:')} ${colors.green(formatNumber(wmonBalance))} WMON`);
        } catch (error) {
            console.log(`üí∞ ${colors.cyan('WMON –±–∞–ª–∞–Ω—Å:')} ${colors.yellow('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å —â–µ —Ä–∞–∑...')}`);
            try {
                // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
                const fallbackProvider = new ethers.providers.JsonRpcProvider(config.RPC_URL);
                const wmonContractFallback = new ethers.Contract(
                    WMON_CONTRACT,
                    ['function balanceOf(address owner) view returns (uint256)'],
                    fallbackProvider
                );
                
                wmonBalance = await wmonContractFallback.balanceOf(address);
                console.log(`üí∞ ${colors.cyan('WMON –±–∞–ª–∞–Ω—Å:')} ${colors.green(formatNumber(wmonBalance))} WMON`);
            } catch (fallbackError) {
                console.log(`üí∞ ${colors.cyan('WMON –±–∞–ª–∞–Ω—Å:')} ${colors.red('–ù–µ–≤—ñ–¥–æ–º–æ')} (–ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É)`);
            }
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (nonce)
        const nonce = await provider.getTransactionCount(address);
        console.log(`üî¢ ${colors.cyan('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (nonce):')} ${colors.yellow(nonce)}`);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        const uniqueTxCount = await getUniqueTransactionsCount(address, provider);
        console.log(`üìù ${colors.cyan('–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:')} ${colors.yellow(uniqueTxCount)}`);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å NFT
        const nftCount = await getNFTCount(address, provider);
        console.log(`üñºÔ∏è ${colors.cyan('–ö—ñ–ª—å–∫—ñ—Å—Ç—å NFT:')} ${colors.yellow(nftCount)}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–∞–∑ —É –º–µ—Ä–µ–∂—ñ
        try {
            const gasPrice = await provider.getGasPrice();
            console.log(`‚õΩ ${colors.cyan('–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ –≥–∞–∑—É:')} ${colors.yellow(ethers.utils.formatUnits(gasPrice, 'gwei'))} Gwei`);
        } catch (error) {
            console.log(`‚õΩ ${colors.cyan('–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ –≥–∞–∑—É:')} ${colors.red('–ù–µ–≤—ñ–¥–æ–º–æ')}`);
        }
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å (MON + WMON)
        const totalBalance = monBalance.add(wmonBalance);
        console.log(`üíµ ${colors.cyan('–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:')} ${colors.green(formatNumber(totalBalance))} (MON + WMON)`);
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è
        let status = 'OK';
        if (totalBalance.lt(ethers.utils.parseEther('0.01'))) {
            status = '–ù–ï–î–û–°–¢–ê–¢–ù–¨–û';
        } else if (totalBalance.lt(ethers.utils.parseEther(config.MIN_BALANCE))) {
            status = '–ù–ò–ó–¨–ö–ò–ô';
        }
        
        return {
            index,
            address,
            monBalance,
            wmonBalance,
            totalBalance,
            nonce,
            uniqueTxCount,
            nftCount,
            hasEnoughBalance: totalBalance.gte(ethers.utils.parseEther(config.MIN_BALANCE)),
            status
        };
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è: ${error.message}`.red);
        return {
            index,
            address: '–ù–µ–≤—ñ–¥–æ–º–æ',
            monBalance: ethers.BigNumber.from(0),
            wmonBalance: ethers.BigNumber.from(0),
            totalBalance: ethers.BigNumber.from(0),
            nonce: 0,
            uniqueTxCount: 0,
            nftCount: 0,
            hasEnoughBalance: false,
            status: '–ü–û–ú–ò–õ–ö–ê'
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É (–∞–ª–≥–æ—Ä–∏—Ç–º Fisher-Yates shuffle)
function shuffleArray(array, seed = 'random') {
    const newArray = [...array]; // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –º–∞—Å–∏–≤—É, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ seed
    const randomGenerator = () => {
        if (seed === 'random') {
            return Math.random();
        } else {
            // –ü—Ä–æ—Å—Ç–∏–π –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—è–¥–∫–∞ seed
            let hash = 0;
            for (let i = 0; i < seed.length; i++) {
                hash = ((hash << 5) - hash) + seed.charCodeAt(i);
                hash |= 0; // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ 32-–±—ñ—Ç–Ω–µ —Ü—ñ–ª–µ
            }
            
            // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –¥–ª—è –±—ñ–ª—å—à–æ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ, –∞–ª–µ —è–∫—â–æ seed —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π, 
            // —Ç–æ –±—É–¥–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å, —â–æ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è, –∞ –Ω–µ –∑–∞–≤–∂–¥–∏ –æ–¥–Ω–∞ –π —Ç–∞ –∂
            const currentTimestamp = Date.now(); 
            return Math.abs(Math.sin(hash + currentTimestamp)) % 1;
        }
    };
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º Fisher-Yates shuffle
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(randomGenerator() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    
    return newArray;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–±–æ—Ä—É –≥–∞–º–∞–Ω—Ü—ñ–≤ –∑ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
function getWallets() {
    const wallets = config.WALLETS || [];
    const proxies = config.PROXIES || [];
    
    if (wallets.length === 0) {
        console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó'.red);
        return { wallets: [], proxies: [] };
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞—Ç–∏ –≥–∞–º–∞–Ω—Ü—ñ
    if (config.PRIVACY && config.PRIVACY.SHUFFLE_WALLETS) {
        const seed = config.PRIVACY.SHUFFLE_SEED || 'random';
        console.log(`üîÄ ${colors.cyan('–ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ')} (${seed !== 'random' ? '–¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ' : '–≤–∏–ø–∞–¥–∫–æ–≤–æ'})`);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∏ [–≥–∞–º–∞–Ω–µ—Ü—å, –ø—Ä–æ–∫—Å—ñ] –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        const pairs = wallets.map((wallet, index) => ({
            wallet,
            proxy: proxies[index % proxies.length]
        }));
        
        // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –ø–∞—Ä–∏
        const shuffledPairs = shuffleArray(pairs, seed);
        
        // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞–∑–∞–¥ –Ω–∞ –º–∞—Å–∏–≤–∏
        const shuffledWallets = shuffledPairs.map(pair => pair.wallet);
        const shuffledProxies = shuffledPairs.map(pair => pair.proxy);
        
        return { wallets: shuffledWallets, proxies: shuffledProxies };
    }
    
    return { wallets, proxies };
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    console.log(colors.bold.green('=== –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–ê–ù–£ –ì–ê–ú–ê–ù–¶–Ü–í ==='));
    const date = new Date();
    console.log(`–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`);
    console.log(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${config.MIN_BALANCE} MON`);
    console.log(`RPC URL: ${config.RPC_URL}`);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ (–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–º—ñ—à–∞–Ω—ñ)
    const { wallets, proxies } = getWallets();
    
    console.log(`\n‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω ${wallets.length} –≥–∞–º–∞–Ω—Ü—ñ–≤...`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤
    const walletResults = [];
    for (let i = 0; i < wallets.length; i++) {
        const privateKey = wallets[i];
        const proxy = proxies[i % proxies.length];
        
        const result = await checkWalletBalance(privateKey, proxy, i);
        walletResults.push(result);
        
        // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (config.PRIVACY && config.PRIVACY.RANDOM_DELAYS && i < wallets.length - 1) {
            const delay = Math.floor(Math.random() * 2000) + 500; // 500-2500 –º—Å
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
    
    // –ü—ñ–¥–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–∏
    const totalMON = walletResults.reduce((sum, wallet) => sum.add(wallet.monBalance), ethers.BigNumber.from(0));
    const totalWMON = walletResults.reduce((sum, wallet) => sum.add(wallet.wmonBalance), ethers.BigNumber.from(0));
    const totalBalance = walletResults.reduce((sum, wallet) => sum.add(wallet.totalBalance), ethers.BigNumber.from(0));
    const validWallets = walletResults.filter(w => w.hasEnoughBalance).length;
    
    console.log('\n' + colors.bold.green('=== –ü–Ü–î–°–£–ú–û–ö ==='));
    console.log(colors.cyan(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—ñ–≤: ${colors.yellow(wallets.length)}`));
    console.log(colors.cyan(`–ì–∞–º–∞–Ω—Ü—ñ–≤ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º: ${colors.yellow(validWallets)}`));
    console.log(colors.cyan(`–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å MON: ${colors.green(formatNumber(totalMON))} MON`));
    console.log(colors.cyan(`–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å WMON: ${colors.green(formatNumber(totalWMON))} WMON`));
    console.log(colors.cyan(`–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å (MON + WMON): ${colors.green(formatNumber(totalBalance))} MON`));
    
    // –¢–∞–±–ª–∏—Ü—è –∑ —É—Å—ñ–º–∞ –≥–∞–º–∞–Ω—Ü—è–º–∏
    console.log('\n' + colors.bold.green('=== –°–¢–ê–¢–£–° –ì–ê–ú–ê–ù–¶–Ü–í ==='));
    console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+----------+');
    console.log('| ' + colors.cyan('‚Ññ') + '       | ' + colors.cyan('–ê–¥—Ä–µ—Å–∞') + '                                  | ' + colors.cyan('MON') + '            | ' + colors.cyan('WMON') + '           | ' + colors.cyan('–í—Å—å–æ–≥–æ') + '         | ' + colors.cyan('Nonce') + '   | ' + colors.cyan('Tx') + '    | ' + colors.cyan('NFT') + '    | ' + colors.cyan('–°—Ç–∞—Ç—É—Å') + '   |');
    console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+----------+');
    
    walletResults.forEach(wallet => {
        let statusColor;
        if (wallet.status === 'OK') {
            statusColor = colors.green;
        } else if (wallet.status === '–ù–ò–ó–¨–ö–ò–ô') {
            statusColor = colors.yellow;
        } else {
            statusColor = colors.red;
        }
        
        console.log(
            `| ${colors.yellow(String(wallet.index + 1).padEnd(7))} | ` +
            `${wallet.address.padEnd(42)} | ` +
            `${formatNumber(wallet.monBalance).padEnd(14)} | ` +
            `${formatNumber(wallet.wmonBalance).padEnd(14)} | ` +
            `${formatNumber(wallet.totalBalance).padEnd(14)} | ` +
            `${String(wallet.nonce).padEnd(7)} | ` +
            `${String(wallet.uniqueTxCount || 0).padEnd(6)} | ` +
            `${String(wallet.nftCount || 0).padEnd(6)} | ` +
            `${statusColor(wallet.status.padEnd(8))} |`
        );
    });
    
    console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+----------+');

    // –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    console.log('\n' + colors.bold.green('=== –ú–û–ñ–õ–ò–í–Ü –î–Ü–á ==='));
    console.log(colors.cyan('1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å–∏:') + ' node check-wallets.js');
    console.log(colors.cyan('2. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç:') + ' node main.js');
    console.log(colors.cyan('3. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:'));
    console.log('   - ' + colors.yellow('node scripts/rubic-multi.js') + ' (Rubic)');
    console.log('   - ' + colors.yellow('node scripts/magma-multi.js') + ' (Magma)');
    console.log('   - ' + colors.yellow('node scripts/izumi-multi.js') + ' (Izumi)');
    console.log('   - ' + colors.yellow('node scripts/apriori-multi.js') + ' (aPriori)');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å (–∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è)
function formatNumber(value, decimals = 4) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è –æ–±'—î–∫—Ç–æ–º BigNumber
    if (typeof value === 'object' && value._isBigNumber) {
        value = ethers.utils.formatEther(value);
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ, —è–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫
    value = parseFloat(value);
    
    // –ó–∞–æ–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ –ø–µ–≤–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
    return value.toFixed(decimals);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è (—Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è)
function formatAddress(address) {
    if (!address || address === '–ù–µ–≤—ñ–¥–æ–º–æ') return address;
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
async function getUniqueTransactionsCount(address, provider) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫
        const currentBlock = await provider.getBlockNumber();
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–Ω–æ –º–µ–Ω—à–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫—ñ–≤ (100 –∑–∞–º—ñ—Å—Ç—å 5000)
        // —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—é API Monad
        const startBlock = Math.max(0, currentBlock - 100);
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        const transactions = new Set();
        
        try {
            const logs = await provider.getLogs({
                fromBlock: startBlock,
                toBlock: currentBlock,
                address: address
            });
            
            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ö–µ—à—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            logs.forEach(log => {
                transactions.add(log.transactionHash);
            });
        } catch (error) {
            console.log(`‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ nonce –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π`);
        }
        
        // –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏—Ö—ñ–¥–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        const nonce = await provider.getTransactionCount(address);
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±—ñ–ª—å—à–µ –∑ –¥–≤–æ—Ö –∑–Ω–∞—á–µ–Ω—å - –∞–±–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ª–æ–≥—ñ–≤, –∞–±–æ nonce
        return Math.max(transactions.size, nonce);
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: ${error.message}`.red);
        return 0;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ NFT –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ
async function getNFTCount(address, provider) {
    try {
        let totalNFTs = 0;
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞—Å–∏–≤ NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if (config.NFT_CONTRACTS && config.NFT_CONTRACTS.length > 0) {
            for (const nftConfig of config.NFT_CONTRACTS) {
                try {
                    const nftContract = new ethers.Contract(
                        nftConfig.address,
                        [
                            'function balanceOf(address owner) view returns (uint256)',
                            'function name() view returns (string)'
                        ],
                        provider
                    );
                    
                    // –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å NFT –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
                    const nftBalance = await nftContract.balanceOf(address);
                    const nftCount = parseInt(nftBalance.toString());
                    
                    if (nftCount > 0) {
                        console.log(`üñºÔ∏è ${colors.cyan(`${nftConfig.name || 'NFT'}:`)} ${colors.yellow(nftCount)}`);
                    }
                    
                    // –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                    totalNFTs += nftCount;
                } catch (error) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
                }
            }
        } else {
            console.log(`‚ÑπÔ∏è ${colors.cyan('–ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è')}`);
        }
        
        return totalNFTs;
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ NFT: ${error.message}`.red);
        return 0;
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
main().catch((error) => {
    console.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:', error);
}); 