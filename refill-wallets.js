const { ethers } = require('ethers');
const colors = require('colors');
const prompts = require('prompts');
const config = require('./config');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è
async function checkWalletBalance(privateKey, proxy) {
    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑ –ø—Ä–æ–∫—Å—ñ
        const provider = new ethers.providers.JsonRpcProvider({
            url: config.RPC_URL,
            headers: proxy ? {
                'Proxy-Authorization': `Basic ${Buffer.from(
                    proxy.split('@')[0]
                ).toString('base64')}`,
            } : {},
        });

        // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è
        const wallet = new ethers.Wallet(privateKey, provider);
        const address = wallet.address;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å MON
        const monBalance = await wallet.getBalance();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å WMON –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        let wmonBalance = ethers.BigNumber.from(0);
        try {
            const wmonContract = new ethers.Contract(
                config.CONTRACTS.WMON,
                ['function balanceOf(address owner) view returns (uint256)'],
                provider
            );
            
            wmonBalance = await wmonContract.balanceOf(address);
        } catch (error) {
            try {
                // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
                const fallbackProvider = new ethers.providers.JsonRpcProvider(config.RPC_URL);
                const wmonContractFallback = new ethers.Contract(
                    config.CONTRACTS.WMON,
                    ['function balanceOf(address owner) view returns (uint256)'],
                    fallbackProvider
                );
                
                wmonBalance = await wmonContractFallback.balanceOf(address);
            } catch (fallbackError) {
                // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º WMON
            }
        }
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å (MON + WMON)
        const totalBalance = monBalance.add(wmonBalance);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (nonce)
        const nonce = await provider.getTransactionCount(address);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        const uniqueTxCount = await getUniqueTransactionsCount(address, provider);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å NFT
        const nftCount = await getNFTCount(address, provider);
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è
        let status = 'OK';
        if (totalBalance.lt(ethers.utils.parseEther('0.01'))) {
            status = '–ù–ï–î–û–°–¢–ê–¢–ù–¨–û';
        } else if (totalBalance.lt(ethers.utils.parseEther(config.MIN_BALANCE))) {
            status = '–ù–ò–ó–¨–ö–ò–ô';
        }
        
        return {
            wallet,
            provider,
            address,
            monBalance,
            wmonBalance,
            totalBalance,
            nonce,
            uniqueTxCount,
            nftCount,
            hasEnoughBalance: totalBalance.gte(ethers.utils.parseEther(config.MIN_BALANCE)),
            status
        };
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è: ${error.message}`.red);
        return {
            address: '–ù–µ–≤—ñ–¥–æ–º–æ',
            monBalance: ethers.BigNumber.from(0),
            wmonBalance: ethers.BigNumber.from(0),
            totalBalance: ethers.BigNumber.from(0),
            nonce: 0,
            uniqueTxCount: 0,
            nftCount: 0,
            hasEnoughBalance: false,
            status: '–ü–û–ú–ò–õ–ö–ê'
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è MON –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤
async function transferMON(fromWallet, toAddress, amount) {
    try {
        console.log(`\n${colors.cyan('=')} –ü–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∞ –≥–∞–º–∞–Ω—Ü—è ${colors.yellow(toAddress)} ${colors.cyan('=')}`);
        console.log(`üîÑ –ù–∞–¥—Å–∏–ª–∞—î–º–æ ${colors.green(formatNumber(amount))} MON –∑ –≥–∞–º–∞–Ω—Ü—è ${colors.yellow(fromWallet.address)}`);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        const tx = await fromWallet.sendTransaction({
            to: toAddress,
            value: amount,
            gasLimit: 30000,
        });
        
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${colors.yellow(config.EXPLORER_URL + tx.hash)}`);
        
        // –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        console.log(`‚è≥ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...`);
        const receipt = await tx.wait();
        
        if (receipt.status === 1) {
            console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —É –±–ª–æ—Ü—ñ ${colors.yellow(receipt.blockNumber)}`.green);
            return true;
        } else {
            console.error(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞`.red);
            return false;
        }
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏: ${error.message}`.red);
        return false;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å (–∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è)
function formatNumber(value, decimals = 4) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è –æ–±'—î–∫—Ç–æ–º BigNumber
    if (typeof value === 'object' && value._isBigNumber) {
        value = ethers.utils.formatEther(value);
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ, —è–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫
    value = parseFloat(value);
    
    // –ó–∞–æ–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ –ø–µ–≤–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
    return value.toFixed(decimals);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
async function getUniqueTransactionsCount(address, provider) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫
        const currentBlock = await provider.getBlockNumber();
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–Ω–æ –º–µ–Ω—à–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫—ñ–≤ (100 –∑–∞–º—ñ—Å—Ç—å 5000)
        // —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—é API Monad
        const startBlock = Math.max(0, currentBlock - 100);
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        const transactions = new Set();
        
        try {
            const logs = await provider.getLogs({
                fromBlock: startBlock,
                toBlock: currentBlock,
                address: address
            });
            
            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ö–µ—à—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            logs.forEach(log => {
                transactions.add(log.transactionHash);
            });
        } catch (error) {
            console.log(`‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ nonce –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π`);
        }
        
        // –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏—Ö—ñ–¥–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        const nonce = await provider.getTransactionCount(address);
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±—ñ–ª—å—à–µ –∑ –¥–≤–æ—Ö –∑–Ω–∞—á–µ–Ω—å - –∞–±–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ª–æ–≥—ñ–≤, –∞–±–æ nonce
        return Math.max(transactions.size, nonce);
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: ${error.message}`.red);
        return 0;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ NFT –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ
async function getNFTCount(address, provider) {
    try {
        let totalNFTs = 0;
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞—Å–∏–≤ NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if (config.NFT_CONTRACTS && config.NFT_CONTRACTS.length > 0) {
            for (const nftConfig of config.NFT_CONTRACTS) {
                try {
                    const nftContract = new ethers.Contract(
                        nftConfig.address,
                        [
                            'function balanceOf(address owner) view returns (uint256)',
                            'function name() view returns (string)'
                        ],
                        provider
                    );
                    
                    // –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å NFT –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
                    const nftBalance = await nftContract.balanceOf(address);
                    const nftCount = parseInt(nftBalance.toString());
                    
                    // –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                    totalNFTs += nftCount;
                } catch (error) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
                }
            }
        }
        
        return totalNFTs;
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ NFT: ${error.message}`.red);
        return 0;
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    console.log('\n' + colors.bold.green('=== –ü–ï–†–ï–ó–ê–ü–†–ê–í–ö–ê –ì–ê–ú–ê–ù–¶–Ü–í ==='));
    console.log(colors.yellow(`–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${new Date().toLocaleString()}`));
    console.log(colors.yellow(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${config.MIN_BALANCE} MON`));
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤
    console.log('\n' + colors.cyan('–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤...'));
    
    const walletResults = [];
    
    for (let i = 0; i < config.WALLETS.length; i++) {
        const privateKey = config.WALLETS[i];
        const proxy = config.PROXIES[i % config.PROXIES.length];
        
        process.stdout.write(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–∞–º–∞–Ω—Ü—è ${i + 1}/${config.WALLETS.length}... `);
        const result = await checkWalletBalance(privateKey, proxy);
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
        let statusColor;
        if (result.status === 'OK') {
            statusColor = colors.green;
        } else if (result.status === '–ù–ò–ó–¨–ö–ò–ô') {
            statusColor = colors.yellow;
        } else {
            statusColor = colors.red;
        }
        
        console.log(`${formatAddress(result.address)} - ${statusColor(result.status)} (${formatNumber(result.totalBalance)} MON)`);
        
        walletResults.push({
            ...result,
            privateKey,
            proxy,
            index: i
        });
    }
    
    // –¢–∞–±–ª–∏—Ü—è –∑ —É—Å—ñ–º–∞ –≥–∞–º–∞–Ω—Ü—è–º–∏
    console.log('\n' + colors.bold.green('=== –°–¢–ê–¢–£–° –ì–ê–ú–ê–ù–¶–Ü–í ==='));
    console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+');
    console.log('| ' + colors.cyan('‚Ññ') + '       | ' + colors.cyan('–ê–¥—Ä–µ—Å–∞') + '                                  | ' + colors.cyan('MON') + '            | ' + colors.cyan('WMON') + '           | ' + colors.cyan('–í—Å—å–æ–≥–æ') + '         | ' + colors.cyan('Nonce') + '   | ' + colors.cyan('Tx') + '    | ' + colors.cyan('NFT') + '    |');
    console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+');

    walletResults.forEach((wallet, index) => {
        console.log(
            `| ${colors.yellow(String(index + 1).padEnd(7))} | ` +
            `${wallet.address.padEnd(42)} | ` +
            `${formatNumber(wallet.monBalance).padEnd(14)} | ` +
            `${formatNumber(wallet.wmonBalance).padEnd(14)} | ` +
            `${formatNumber(wallet.totalBalance).padEnd(14)} | ` +
            `${String(wallet.nonce).padEnd(7)} | ` +
            `${String(wallet.uniqueTxCount || 0).padEnd(6)} | ` +
            `${String(wallet.nftCount || 0).padEnd(6)} |`
        );
    });

    console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+');
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –Ω–∏–∑—å–∫–∏–º/–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º
    const lowBalanceWallets = walletResults.filter(w => w.status === '–ù–ò–ó–¨–ö–ò–ô' || w.status === '–ù–ï–î–û–°–¢–ê–¢–ù–¨–û');
    
    if (lowBalanceWallets.length === 0) {
        console.log('\n' + colors.green('‚úÖ –£—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ –º–∞—é—Ç—å –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –±–∞–ª–∞–Ω—Å. –ü–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞.'));
        return;
    }
    
    console.log('\n' + colors.yellow(`–ó–Ω–∞–π–¥–µ–Ω–æ ${lowBalanceWallets.length} –≥–∞–º–∞–Ω—Ü—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:`));
    
    lowBalanceWallets.forEach((wallet, index) => {
        const statusColor = wallet.status === '–ù–ò–ó–¨–ö–ò–ô' ? colors.yellow : colors.red;
        console.log(`${index + 1}. ${wallet.address} - ${statusColor(wallet.status)} (${formatNumber(wallet.totalBalance)} MON)`);
    });
    
    // –ó–∞–ø–∏—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –≥–∞–º–∞–Ω–µ—Ü—å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏
    console.log('\n' + colors.cyan('–û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å-–¥–∂–µ—Ä–µ–ª–æ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏:'));
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏
    const sourceWallets = walletResults.filter(w => w.status === 'OK');
    
    if (sourceWallets.length === 0) {
        console.log('\n' + colors.red('‚ùå –ù–µ–º–∞—î –≥–∞–º–∞–Ω—Ü—ñ–≤ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏. –û–ø–µ—Ä–∞—Ü—ñ—è –Ω–µ–º–æ–∂–ª–∏–≤–∞.'));
        return;
    }
    
    const sourceOptions = sourceWallets.map((wallet, index) => ({
        title: `${formatAddress(wallet.address)} - ${formatNumber(wallet.totalBalance)} MON`,
        value: index
    }));
    
    const sourceResponse = await prompts({
        type: 'select',
        name: 'sourceIndex',
        message: '–û–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å-–¥–∂–µ—Ä–µ–ª–æ:',
        choices: sourceOptions,
        initial: 0
    });
    
    if (sourceResponse.sourceIndex === undefined) {
        console.log('\n' + colors.yellow('–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.'));
        return;
    }
    
    const sourceWallet = sourceWallets[sourceResponse.sourceIndex];
    
    // –ó–∞–ø–∏—Ç—É—î–º–æ —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏
    const defaultAmount = 0.5; // 0.5 MON –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    const amountResponse = await prompts({
        type: 'number',
        name: 'amount',
        message: '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏ (MON):',
        initial: defaultAmount,
        min: 0.01,
        max: parseFloat(ethers.utils.formatEther(sourceWallet.monBalance)) - 0.01 // –ó–∞–ª–∏—à–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –Ω–∞ –≥–∞–∑
    });
    
    if (amountResponse.amount === undefined) {
        console.log('\n' + colors.yellow('–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.'));
        return;
    }
    
    const amountMON = ethers.utils.parseEther(amountResponse.amount.toString());
    
    // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    const confirmResponse = await prompts({
        type: 'confirm',
        name: 'confirm',
        message: `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∏—Ç–∏ ${lowBalanceWallets.length} –≥–∞–º–∞–Ω—Ü—ñ–≤ –Ω–∞ —Å—É–º—É ${amountResponse.amount} MON –∫–æ–∂–µ–Ω?`,
        initial: true
    });
    
    if (!confirmResponse.confirm) {
        console.log('\n' + colors.yellow('–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.'));
        return;
    }
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫—É
    console.log('\n' + colors.cyan('–ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫—É –≥–∞–º–∞–Ω—Ü—ñ–≤...'));
    
    let successCount = 0;
    
    for (const wallet of lowBalanceWallets) {
        const success = await transferMON(sourceWallet.wallet, wallet.address, amountMON);
        if (success) {
            successCount++;
        }
    }
    
    console.log('\n' + colors.green(`‚úÖ –ü–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø—ñ—à–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ ${successCount} –∑ ${lowBalanceWallets.length} –≥–∞–º–∞–Ω—Ü—ñ–≤.`));
    
    if (successCount > 0) {
        console.log('\n' + colors.cyan('–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω: node check-wallets.js'));
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è (—Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è)
function formatAddress(address) {
    if (!address || address === '–ù–µ–≤—ñ–¥–æ–º–æ') return address;
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
main().catch((error) => {
    console.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:', error);
}); 