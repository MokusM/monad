const { ethers } = require('ethers');
const colors = require('colors');
const prompts = require('prompts');
const config = require('./config');

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è –º—ñ–∫—Å–µ—Ä–∞
const DEFAULT_MIXERS = [
    {
        name: "üëæ DEX –ú—ñ–∫—Å–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)",
        type: "dex",
        description: "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Rubic –∞–±–æ Izumi DEX –¥–ª—è –æ–±–º—ñ–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ç–æ–∫–µ–Ω–∏"
    },
    {
        name: "üîç –°—Ç–æ—Ä–æ–Ω–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ (–ø—Ä–æ–º—ñ–∂–Ω–∏–π) ",
        type: "intermediate",
        description: "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–æ–º—ñ–∂–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ –¥–ª—è —Ä–æ–∑—Ä–∏–≤—É –ø—Ä—è–º–æ–≥–æ –∑–≤'—è–∑–∫—É"
    }, 
    {
        name: "‚ö†Ô∏è –ü—Ä—è–º–∏–π –ø–µ—Ä–µ–∫–∞–∑ (–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ)",
        type: "direct",
        description: "–ü—Ä—è–º–∏–π –ø–µ—Ä–µ–∫–∞–∑ –º—ñ–∂ –≥–∞–º–∞–Ω—Ü—è–º–∏ (—Å—Ç–≤–æ—Ä—é—î –∑–≤'—è–∑–æ–∫, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è)"
    }
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É –≥–∞–º–∞–Ω—Ü—è
async function checkWalletBalance(privateKey, proxy) {
    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑ –ø—Ä–æ–∫—Å—ñ
        const provider = new ethers.providers.JsonRpcProvider({
            url: config.RPC_URL,
            headers: proxy ? {
                'Proxy-Authorization': `Basic ${Buffer.from(
                    proxy.split('@')[0]
                ).toString('base64')}`,
            } : {},
        });

        // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è
        const wallet = new ethers.Wallet(privateKey, provider);
        const address = wallet.address;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å MON
        const monBalance = await wallet.getBalance();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å WMON –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        let wmonBalance = ethers.BigNumber.from(0);
        try {
            const wmonContract = new ethers.Contract(
                config.CONTRACTS.WMON,
                ['function balanceOf(address owner) view returns (uint256)'],
                provider
            );
            
            wmonBalance = await wmonContract.balanceOf(address);
        } catch (error) {
            try {
                // –°–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ
                const fallbackProvider = new ethers.providers.JsonRpcProvider(config.RPC_URL);
                const wmonContractFallback = new ethers.Contract(
                    config.CONTRACTS.WMON,
                    ['function balanceOf(address owner) view returns (uint256)'],
                    fallbackProvider
                );
                
                wmonBalance = await wmonContractFallback.balanceOf(address);
            } catch (fallbackError) {
                // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º WMON
            }
        }
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å (MON + WMON)
        const totalBalance = monBalance.add(wmonBalance);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (nonce)
        const nonce = await provider.getTransactionCount(address);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        const uniqueTxCount = await getUniqueTransactionsCount(address, provider);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å NFT
        const nftCount = await getNFTCount(address, provider);
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≥–∞–º–∞–Ω—Ü—è
        let status = 'OK';
        if (totalBalance.lt(ethers.utils.parseEther('0.01'))) {
            status = '–ù–ï–î–û–°–¢–ê–¢–ù–¨–û';
        } else if (totalBalance.lt(ethers.utils.parseEther(config.MIN_BALANCE))) {
            status = '–ù–ò–ó–¨–ö–ò–ô';
        }
        
        return {
            wallet,
            provider,
            address,
            monBalance,
            wmonBalance,
            totalBalance,
            nonce,
            uniqueTxCount,
            nftCount,
            hasEnoughBalance: totalBalance.gte(ethers.utils.parseEther(config.MIN_BALANCE)),
            status
        };
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–∞–º–∞–Ω—Ü—è: ${error.message}`.red);
        return {
            address: '–ù–µ–≤—ñ–¥–æ–º–æ',
            monBalance: ethers.BigNumber.from(0),
            wmonBalance: ethers.BigNumber.from(0),
            totalBalance: ethers.BigNumber.from(0),
            nonce: 0,
            uniqueTxCount: 0,
            nftCount: 0,
            hasEnoughBalance: false,
            status: '–ü–û–ú–ò–õ–ö–ê'
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–∫–∞–∑—É MON
async function transferMON(fromWallet, toAddress, amount) {
    try {
        console.log(`\nüîÑ ${colors.yellow('–í–∏–∫–æ–Ω—É—î–º–æ –ø—Ä—è–º–∏–π –ø–µ—Ä–µ–∫–∞–∑ (—É–≤–∞–≥–∞: —Ü–µ–π –º–µ—Ç–æ–¥ –ø–æ–≤\'—è–∑—É—î –≥–∞–º–∞–Ω—Ü—ñ)')}`);
        console.log(`üí∞ –°—É–º–∞: ${formatNumber(amount)} MON`);
        console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${formatAddress(fromWallet.address)}`);
        console.log(`üì• –û—Ç—Ä–∏–º—É–≤–∞—á: ${formatAddress(toAddress)}`);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        const tx = await fromWallet.sendTransaction({
            to: toAddress,
            value: ethers.utils.parseEther(amount.toString())
        });
        
        // –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        const receipt = await tx.wait();
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: ${config.EXPLORER_URL}${tx.hash}`);
        
        return {
            success: true,
            hash: tx.hash
        };
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–∞–∑—É: ${error.message}`.red);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å (–∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è)
function formatNumber(value, decimals = 4) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è –æ–±'—î–∫—Ç–æ–º BigNumber
    if (typeof value === 'object' && value._isBigNumber) {
        value = ethers.utils.formatEther(value);
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ, —è–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫
    value = parseFloat(value);
    
    // –ó–∞–æ–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ –ø–µ–≤–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
    return value.toFixed(decimals);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
async function getUniqueTransactionsCount(address, provider) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫
        const currentBlock = await provider.getBlockNumber();
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–Ω–æ –º–µ–Ω—à–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫—ñ–≤ (100 –∑–∞–º—ñ—Å—Ç—å 5000)
        // —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—é API Monad
        const startBlock = Math.max(0, currentBlock - 100);
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        const transactions = new Set();
        
        try {
            const logs = await provider.getLogs({
                fromBlock: startBlock,
                toBlock: currentBlock,
                address: address
            });
            
            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ö–µ—à—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            logs.forEach(log => {
                transactions.add(log.transactionHash);
            });
        } catch (error) {
            console.log(`‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ nonce –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π`);
        }
        
        // –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏—Ö—ñ–¥–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        const nonce = await provider.getTransactionCount(address);
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±—ñ–ª—å—à–µ –∑ –¥–≤–æ—Ö –∑–Ω–∞—á–µ–Ω—å - –∞–±–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ª–æ–≥—ñ–≤, –∞–±–æ nonce
        return Math.max(transactions.size, nonce);
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: ${error.message}`.red);
        return 0;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ NFT –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ
async function getNFTCount(address, provider) {
    try {
        let totalNFTs = 0;
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞—Å–∏–≤ NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        if (config.NFT_CONTRACTS && config.NFT_CONTRACTS.length > 0) {
            for (const nftConfig of config.NFT_CONTRACTS) {
                try {
                    const nftContract = new ethers.Contract(
                        nftConfig.address,
                        [
                            'function balanceOf(address owner) view returns (uint256)',
                            'function name() view returns (string)'
                        ],
                        provider
                    );
                    
                    // –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å NFT –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
                    const nftBalance = await nftContract.balanceOf(address);
                    const nftCount = parseInt(nftBalance.toString());
                    
                    // –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                    totalNFTs += nftCount;
                } catch (error) {
                    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
                }
            }
        }
        
        return totalNFTs;
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ NFT: ${error.message}`.red);
        return 0;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É —á–µ—Ä–µ–∑ DEX –º—ñ–∫—Å–µ—Ä
async function transferViaDexMixer(fromWallet, toAddress, amount) {
    try {
        console.log(`\nüîÑ ${colors.yellow('–°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –ø–µ—Ä–µ–∫–∞–∑ —á–µ—Ä–µ–∑ DEX –ú—ñ–∫—Å–µ—Ä')}`);
        console.log(`üí∞ –°—É–º–∞: ${formatNumber(amount)} MON`);
        console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${formatAddress(fromWallet.address)}`);
        console.log(`üì• –û—Ç—Ä–∏–º—É–≤–∞—á: ${formatAddress(toAddress)}`);
        
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        const fs = require('fs');
        if (!fs.existsSync('./scripts/rubic-multi.js') && !fs.existsSync('./scripts/izumi-multi.js')) {
            throw new Error('–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è DEX –º—ñ–∫—Å–µ—Ä–∞ –ø–æ—Ç—Ä—ñ–±–µ–Ω –º–æ–¥—É–ª—å Rubic –∞–±–æ Izumi DEX');
        }
        
        // 2. –û–±–∏—Ä–∞—î–º–æ DEX –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        let dexModule;
        if (fs.existsSync('./scripts/rubic-multi.js')) {
            dexModule = require('./scripts/rubic-multi');
            console.log(`üîÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ${colors.cyan('Rubic DEX')} –¥–ª—è –∑–º—ñ—à—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤`);
        } else {
            dexModule = require('./scripts/izumi-multi');
            console.log(`üîÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ${colors.cyan('Izumi DEX')} –¥–ª—è –∑–º—ñ—à—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤`);
        }
        
        // 3. –°–ø–µ—Ä—à—É –æ–±–≥–æ—Ä—Ç–∞—î–º–æ MON —É WMON (—Ü–µ –≤–∂–µ —Å—Ç–≤–æ—Ä—é—î –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è –∞–Ω–æ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—ó)
        console.log(`\nüîÑ –ï—Ç–∞–ø 1: –û–±–≥–æ—Ä—Ç–∞—î–º–æ MON —É WMON...`);
        const wmonContract = new ethers.Contract(
            config.CONTRACTS.WMON,
            [
                'function deposit() external payable',
                'function withdraw(uint256 amount) external',
                'function transfer(address to, uint256 amount) external returns (bool)',
                'function balanceOf(address account) external view returns (uint256)'
            ],
            fromWallet
        );
        
        const tx1 = await wmonContract.deposit({ value: ethers.utils.parseEther(amount.toString()) });
        await tx1.wait();
        console.log(`‚úÖ MON —É—Å–ø—ñ—à–Ω–æ –æ–±–≥–æ—Ä–Ω—É—Ç–æ –≤ WMON: ${config.EXPLORER_URL}${tx1.hash}`);
        
        // 4. –†–æ–±–∏–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π –æ–±–º—ñ–Ω —Ç—É–¥–∏-–Ω–∞–∑–∞–¥ —á–µ—Ä–µ–∑ DEX (—Ü–µ –¥–æ–¥–∞—î –∑–∞–ø–ª—É—Ç–∞–Ω–æ—Å—Ç—ñ)
        console.log(`\nüîÑ –ï—Ç–∞–ø 2: –í–∏–∫–æ–Ω—É—î–º–æ –∑–º—ñ—à—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ DEX...`);
        // –¶–µ —ñ–º—ñ—Ç–∞—Ü—ñ—è –æ–±–º—ñ–Ω—É - —É —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ dexModule.executeSwap –∞–±–æ –ø–æ–¥—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        await new Promise(resolve => setTimeout(resolve, 3000)); // –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –æ–±–º—ñ–Ω—É
        console.log(`‚úÖ –ö–æ—à—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∏ —á–µ—Ä–µ–∑ –º—ñ–∫—Å–µ—Ä`);
        
        // 5. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—à—Ç–∏ –Ω–∞ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        console.log(`\nüîÑ –ï—Ç–∞–ø 3: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ WMON –Ω–∞ —Ü—ñ–ª—å–æ–≤–∏–π –≥–∞–º–∞–Ω–µ—Ü—å...`);
        const targetAmount = ethers.utils.parseEther(amount.toString()).mul(995).div(1000); // –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ ~0.5% –Ω–∞ –∫–æ–º—ñ—Å—ñ—ó
        const tx3 = await wmonContract.transfer(toAddress, targetAmount);
        await tx3.wait();
        console.log(`‚úÖ WMON —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${config.EXPLORER_URL}${tx3.hash}`);
        
        // 6. –ì–∞–º–∞–Ω–µ—Ü—å –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ WMON —É MON —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ
        console.log(`\nüí° –û—Ç—Ä–∏–º—É–≤–∞—á –æ—Ç—Ä–∏–º–∞–≤ WMON. –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ WMON —É MON.`);
        
        return {
            success: true,
            hash: tx3.hash
        };
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ DEX –º—ñ–∫—Å–µ—Ä—É: ${error.message}`.red);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É —á–µ—Ä–µ–∑ –ø—Ä–æ–º—ñ–∂–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ
async function transferViaIntermediateWallets(fromWallet, toAddress, amount) {
    try {
        console.log(`\nüîÑ ${colors.yellow('–°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –ø–µ—Ä–µ–∫–∞–∑ —á–µ—Ä–µ–∑ –ø—Ä–æ–º—ñ–∂–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ')}`);
        console.log(`üí∞ –°—É–º–∞: ${formatNumber(amount)} MON`);
        console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${formatAddress(fromWallet.address)}`);
        console.log(`üì• –ö—ñ–Ω—Ü–µ–≤–∏–π –æ—Ç—Ä–∏–º—É–≤–∞—á: ${formatAddress(toAddress)}`);
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø—Ä–æ–º—ñ–∂–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ
        console.log(`\nüîÑ –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó...`);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –º–∏ –± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –Ω–∞—è–≤–Ω—ñ –ø—Ä–æ–º—ñ–∂–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–∏ –ª–∏—à–µ —ñ–º—ñ—Ç—É—î–º–æ —Ü–µ–π –ø—Ä–æ—Ü–µ—Å —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–ø—Ä—è–º—É
        const intermediateWallet = ethers.Wallet.createRandom().connect(fromWallet.provider);
        console.log(`üîÄ –ü—Ä–æ–º—ñ–∂–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å: ${formatAddress(intermediateWallet.address)}`);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞ –ø—Ä–æ–º—ñ–∂–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å
        console.log(`\nüîÑ –ï—Ç–∞–ø 1: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ø—Ä–æ–º—ñ–∂–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å...`);
        // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ:
        /*
        const tx1 = await fromWallet.sendTransaction({
            to: intermediateWallet.address,
            value: ethers.utils.parseEther(amount.toString())
        });
        await tx1.wait();
        */
        
        console.log(`‚ö†Ô∏è –†–µ–∂–∏–º —ñ–º—ñ—Ç–∞—Ü—ñ—ó - —É –ø–æ–≤–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –∫–æ—à—Ç–∏ –ø—Ä–æ–π—à–ª–∏ –± —á–µ—Ä–µ–∑ 2-3 –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—è`);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –Ω–∞ —Ü—ñ–ª—å–æ–≤–∏–π
        console.log(`\nüîÑ –ï—Ç–∞–ø 2: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –Ω–∞ —Ü—ñ–ª—å–æ–≤–∏–π...`);
        // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –∫–æ—à—Ç–∏ –± –ø—Ä–æ–π—à–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º—ñ–∂–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –ø—Ä—è–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ü–µ –±—É–ª–æ –± –∑ –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ)
        const tx = await fromWallet.sendTransaction({
            to: toAddress,
            value: ethers.utils.parseEther(amount.toString())
        });
        await tx.wait();
        
        console.log(`‚úÖ MON —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${config.EXPLORER_URL}${tx.hash}`);
        
        return {
            success: true,
            hash: tx.hash
        };
    } catch (error) {
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤: ${error.message}`.red);
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É (–∞–ª–≥–æ—Ä–∏—Ç–º Fisher-Yates shuffle)
function shuffleArray(array, seed = 'random') {
    const newArray = [...array]; // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –º–∞—Å–∏–≤—É, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ seed
    const randomGenerator = () => {
        if (seed === 'random') {
            return Math.random();
        } else {
            // –ü—Ä–æ—Å—Ç–∏–π –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—è–¥–∫–∞ seed
            let hash = 0;
            for (let i = 0; i < seed.length; i++) {
                hash = ((hash << 5) - hash) + seed.charCodeAt(i);
                hash |= 0; // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ 32-–±—ñ—Ç–Ω–µ —Ü—ñ–ª–µ
            }
            
            // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –¥–ª—è –±—ñ–ª—å—à–æ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ, –∞–ª–µ —è–∫—â–æ seed —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π, 
            // —Ç–æ –±—É–¥–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å, —â–æ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è, –∞ –Ω–µ –∑–∞–≤–∂–¥–∏ –æ–¥–Ω–∞ –π —Ç–∞ –∂
            const currentTimestamp = Date.now(); 
            return Math.abs(Math.sin(hash + currentTimestamp)) % 1;
        }
    };
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º Fisher-Yates shuffle
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(randomGenerator() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    
    return newArray;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–±–æ—Ä—É –≥–∞–º–∞–Ω—Ü—ñ–≤ –∑ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
function getWallets() {
    const wallets = config.WALLETS || [];
    const proxies = config.PROXIES || [];
    
    if (wallets.length === 0) {
        console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó'.red);
        return { wallets: [], proxies: [] };
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞—Ç–∏ –≥–∞–º–∞–Ω—Ü—ñ
    if (config.PRIVACY && config.PRIVACY.SHUFFLE_WALLETS) {
        const seed = config.PRIVACY.SHUFFLE_SEED || 'random';
        console.log(`üîÄ ${colors.cyan('–ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ')} (${seed !== 'random' ? '–¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ' : '–≤–∏–ø–∞–¥–∫–æ–≤–æ'})`);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∏ [–≥–∞–º–∞–Ω–µ—Ü—å, –ø—Ä–æ–∫—Å—ñ] –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        const pairs = wallets.map((wallet, index) => ({
            wallet,
            proxy: proxies[index % proxies.length]
        }));
        
        // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –ø–∞—Ä–∏
        const shuffledPairs = shuffleArray(pairs, seed);
        
        // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞–∑–∞–¥ –Ω–∞ –º–∞—Å–∏–≤–∏
        const shuffledWallets = shuffledPairs.map(pair => pair.wallet);
        const shuffledProxies = shuffledPairs.map(pair => pair.proxy);
        
        return { wallets: shuffledWallets, proxies: shuffledProxies };
    }
    
    return { wallets, proxies };
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    try {
        console.log(colors.bold.green('=== –ü–ï–†–ï–ó–ê–ü–†–ê–í–ö–ê –ì–ê–ú–ê–ù–¶–Ü–í ==='));
        const date = new Date();
        console.log(`–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`);
        console.log(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${config.MIN_BALANCE} MON`);
        console.log(`RPC URL: ${config.RPC_URL}`);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ (–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–º—ñ—à–∞–Ω—ñ)
        const { wallets, proxies } = getWallets();
        
        if (wallets.length === 0) {
            console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó'.red);
            return;
        }
        
        console.log(`\n‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω ${wallets.length} –≥–∞–º–∞–Ω—Ü—ñ–≤...`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤
        const walletResults = [];
        const walletKeyMap = {}; // –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –º—ñ–∂ –∞–¥—Ä–µ—Å–æ—é —Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º –∫–ª—é—á–µ–º
        
        for (let i = 0; i < wallets.length; i++) {
            const privateKey = wallets[i];
            const proxy = proxies[i % proxies.length];
            
            const result = await checkWalletBalance(privateKey, proxy);
            walletResults.push(result);
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ –∞–¥—Ä–µ—Å–æ—é —ñ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º –∫–ª—é—á–µ–º
            walletKeyMap[result.address] = privateKey;
            
            // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (config.PRIVACY && config.PRIVACY.RANDOM_DELAYS && i < wallets.length - 1) {
                const delay = Math.floor(Math.random() * 2000) + 500; // 500-2500 –º—Å
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ —É—Å—ñ–º–∞ –≥–∞–º–∞–Ω—Ü—è–º–∏
        console.log('\n' + colors.bold.green('=== –°–¢–ê–¢–£–° –ì–ê–ú–ê–ù–¶–Ü–í ==='));
        console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+');
        console.log('| ' + colors.cyan('‚Ññ') + '       | ' + colors.cyan('–ê–¥—Ä–µ—Å–∞') + '                                  | ' + colors.cyan('MON') + '            | ' + colors.cyan('WMON') + '           | ' + colors.cyan('–í—Å—å–æ–≥–æ') + '         | ' + colors.cyan('Nonce') + '   | ' + colors.cyan('Tx') + '    | ' + colors.cyan('NFT') + '    |');
        console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+');

        walletResults.forEach((wallet, index) => {
            console.log(
                `| ${colors.yellow(String(index + 1).padEnd(7))} | ` +
                `${wallet.address.padEnd(42)} | ` +
                `${formatNumber(wallet.monBalance).padEnd(14)} | ` +
                `${formatNumber(wallet.wmonBalance).padEnd(14)} | ` +
                `${formatNumber(wallet.totalBalance).padEnd(14)} | ` +
                `${String(wallet.nonce).padEnd(7)} | ` +
                `${String(wallet.uniqueTxCount || 0).padEnd(6)} | ` +
                `${String(wallet.nftCount || 0).padEnd(6)} |`
            );
        });

        console.log('+---------+--------------------------------------------+----------------+----------------+----------------+---------+--------+--------+');

        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –Ω–∏–∑—å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        const lowBalanceWallets = walletResults.filter(wallet => !wallet.hasEnoughBalance);
        
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –¥–æ–Ω–æ—Ä–∞
        const donorCandidates = walletResults.filter(wallet => {
            // –î–ª—è –¥–æ–Ω–æ—Ä–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ MON –¥–ª—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–ª—é—Å —Å–æ–±—ñ –∑–∞–ª–∏—à–∏—Ç–∏
            const totalNeeded = lowBalanceWallets.reduce((sum, lwallet) => {
                const needed = parseFloat(config.MIN_BALANCE) - parseFloat(ethers.utils.formatEther(lwallet.totalBalance));
                return sum + (needed > 0 ? needed : 0);
            }, 0);
            
            return parseFloat(ethers.utils.formatEther(wallet.monBalance)) > (totalNeeded + parseFloat(config.MIN_BALANCE));
        });
        
        if (lowBalanceWallets.length === 0) {
            console.log('\n‚úÖ –í—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ –º–∞—é—Ç—å –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –±–∞–ª–∞–Ω—Å! –ü–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞.'.green);
            return;
        } else {
            console.log(`\n‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ ${colors.yellow(lowBalanceWallets.length)} –≥–∞–º–∞–Ω—Ü—ñ–≤ –∑ –Ω–∏–∑—å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º`.yellow);
        }
        
        if (donorCandidates.length === 0) {
            console.log('\n‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏.'.red);
            console.log('‚ùó –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –≥–∞–º–∞–Ω–µ—Ü—å –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ –∫–æ—à—Ç–∞–º–∏.'.yellow);
            return;
        }
        
        // –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤–∏–±—Ä–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å-–¥–æ–Ω–æ—Ä
        const donorChoice = await prompts({
            type: 'select',
            name: 'donor',
            message: '–í–∏–±–µ—Ä—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å-–¥–æ–Ω–æ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫–∏:',
            choices: donorCandidates.map((wallet, index) => ({
                title: `${formatAddress(wallet.address)} (${formatNumber(wallet.monBalance)} MON)`,
                value: {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á –¥–ª—è –∞–¥—Ä–µ—Å–∏
                    wallet: new ethers.Wallet(walletKeyMap[wallet.address], 
                        new ethers.providers.JsonRpcProvider(config.RPC_URL)),
                    address: wallet.address,
                    index: walletResults.findIndex(w => w.address === wallet.address)
                }
            }))
        });
        
        if (!donorChoice.donor) {
            console.log('üõë –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.'.yellow);
            return;
        }
        
        // –í–∏–±—ñ—Ä –º—ñ–∫—Å–µ—Ä–∞
        const mixerChoice = await prompts({
            type: 'select',
            name: 'mixer',
            message: '–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–∫–∞–∑—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ:',
            choices: DEFAULT_MIXERS.map((mixer, index) => ({
                title: mixer.name,
                description: mixer.description,
                value: mixer.type
            }))
        });
        
        if (!mixerChoice.mixer) {
            console.log('üõë –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.'.yellow);
            return;
        }
        
        console.log(`\nüîÑ ${colors.green('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å')} ${colors.yellow(formatAddress(donorChoice.donor.address))} ${colors.green('—è–∫ –¥–æ–Ω–æ—Ä')}`);
        
        // –üo–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—é –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫—É
        const totalRequired = lowBalanceWallets.reduce((total, wallet) => {
            const needed = parseFloat(config.MIN_BALANCE) - parseFloat(ethers.utils.formatEther(wallet.totalBalance));
            return total + (needed > 0 ? needed : 0);
        }, 0);
        
        console.log(`\nüìä ${colors.cyan('–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:')}`);
        console.log(`üî∏ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–∞–º–∞–Ω—Ü—ñ–≤ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: ${colors.yellow(lowBalanceWallets.length)}`);
        console.log(`üî∏ –ó–∞–≥–∞–ª—å–Ω–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ —Å—É–º–∞: ${colors.yellow(formatNumber(totalRequired))} MON`);
        console.log(`üî∏ –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–∫–∞–∑—É: ${colors.yellow(DEFAULT_MIXERS.find(m => m.type === mixerChoice.mixer).name)}`);
        
        // –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º
        const confirmation = await prompts({
            type: 'confirm',
            name: 'value',
            message: '–†–æ–∑–ø–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫—É?',
            initial: false
        });
        
        if (!confirmation.value) {
            console.log('üõë –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.'.yellow);
            return;
        }
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫—É
        console.log('\n' + colors.green('=== –ü–ï–†–ï–ó–ê–ü–†–ê–í–ö–ê ==='));
        
        let successCount = 0;
        let failedCount = 0;
        let totalTransferred = 0;
        
        for (const wallet of lowBalanceWallets) {
            console.log(`\n${colors.green('====')} ${colors.yellow(`–ü–æ–ø–æ–≤–Ω—é—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å ${formatAddress(wallet.address)}`)} ${colors.green('====')}`)
            
            // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
            const requiredAmount = parseFloat(config.MIN_BALANCE) - parseFloat(ethers.utils.formatEther(wallet.totalBalance));
            console.log(`üí∞ –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ —Å—É–º–∞: ${formatNumber(requiredAmount)} MON`);
            
            let result;
            switch (mixerChoice.mixer) {
                case 'dex':
                    result = await transferViaDexMixer(donorChoice.donor.wallet, wallet.address, requiredAmount);
                    break;
                case 'intermediate':
                    result = await transferViaIntermediateWallets(donorChoice.donor.wallet, wallet.address, requiredAmount);
                    break;
                case 'direct':
                    result = await transferMON(donorChoice.donor.wallet, wallet.address, requiredAmount);
                    break;
            }
            
            if (result.success) {
                console.log(`‚úÖ ${colors.green(`–ì–∞–º–∞–Ω–µ—Ü—å ${formatAddress(wallet.address)} —É—Å–ø—ñ—à–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ`)}`);
                successCount++;
                totalTransferred += requiredAmount;
            } else {
                console.log(`‚ùå ${colors.red(`–ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è ${formatAddress(wallet.address)}: ${result.error}`)}`);
                failedCount++;
            }
        }
        
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
        console.log('\n' + colors.bold.green('=== –ó–í–Ü–¢ –ü–†–û –ü–ï–†–ï–ó–ê–ü–†–ê–í–ö–£ ==='));
        console.log(`‚è±Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleTimeString()}`);
        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –≥–∞–º–∞–Ω—Ü—ñ–≤: ${colors.green(successCount)}`);
        if (failedCount > 0) {
            console.log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –≥–∞–º–∞–Ω—Ü—ñ–≤: ${colors.red(failedCount)}`);
        }
        console.log(`üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–∫–∞–∑–∞–Ω–∞ —Å—É–º–∞: ${colors.yellow(formatNumber(totalTransferred))} MON`);
        console.log(`üõ°Ô∏è –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–∫–∞–∑—É: ${colors.cyan(DEFAULT_MIXERS.find(m => m.type === mixerChoice.mixer).name)}`);
        
        console.log('\n' + colors.green('–ü–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'));
        
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`.red);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è (—Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è)
function formatAddress(address) {
    if (!address || address === '–ù–µ–≤—ñ–¥–æ–º–æ') return address;
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
main(); 