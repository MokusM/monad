/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä—ñ–≤
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–ª–æ–∫—á–µ–π–Ω–æ–º Monad —á–µ—Ä–µ–∑ –∫–æ–∂–µ–Ω –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä
 */

const { ethers } = require('ethers');
const colors = require('colors');
const config = require('./config');
const walletUtils = require('./utils/wallet-utils');

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–Ω—É
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–∫—Å—ñ
async function checkProxy(proxy, index) {
    console.log(`\n${colors.yellow(`=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–∫—Å—ñ #${index + 1}: ${formatProxyUrl(proxy)} ===`)}`);
    
    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑ –ø—Ä–æ–∫—Å—ñ
        const provider = new ethers.providers.JsonRpcProvider({
            url: config.RPC_URL,
            headers: {
                'Proxy-Authorization': `Basic ${Buffer.from(
                    proxy.split('@')[0]
                ).toString('base64')}`,
            },
        });

        // –í–∏–º—ñ—Ä—é—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
        const startTime = Date.now();
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π –∑–∞–ø–∏—Ç - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫—É
        console.log(`üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${config.RPC_URL} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ...`);
        const blockNumber = await provider.getBlockNumber();
        
        // –†–∞—Ö—É—î–º–æ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const responseTime = Date.now() - startTime;
        
        console.log(`‚úÖ ${colors.green('–ü—Ä–æ–∫—Å—ñ –ø—Ä–∞—Ü—é—î!')} –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${responseTime}ms`);
        console.log(`üßä –ü–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫: ${colors.cyan(blockNumber)}`);
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–∞–∑—É –¥–ª—è —É–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
        const gasPrice = await provider.getGasPrice();
        const gasPriceGwei = parseFloat(ethers.utils.formatUnits(gasPrice, "gwei")).toFixed(1);
        console.log(`‚õΩ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ –≥–∞–∑—É: ${colors.cyan(gasPriceGwei)} Gwei`);
        
        return {
            proxy,
            index,
            status: 'OK',
            responseTime,
            blockNumber,
            gasPrice: gasPriceGwei
        };
    } catch (error) {
        console.log(`‚ùå ${colors.red("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:")} ${error.message}`);
        return {
            proxy,
            index,
            status: '–ü–û–ú–ò–õ–ö–ê',
            error: error.message
        };
    }
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è URL –ø—Ä–æ–∫—Å—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function formatProxyUrl(proxy) {
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å URL –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å
        if (proxy.includes('@')) {
            // –ó–∞–º—ñ–Ω—é—î–º–æ –ª–æ–≥—ñ–Ω:–ø–∞—Ä–æ–ª—å –Ω–∞ ***
            const [auth, host] = proxy.split('@');
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ –ª–æ–≥—ñ–Ω—É –ø—ñ—Å–ª—è http:// –∞–±–æ https://
            const protocolEnd = auth.indexOf('://') + 3;
            const protocol = auth.substring(0, protocolEnd);
            const credentials = '***:***';
            
            return `${protocol}${credentials}@${host}`;
        } else {
            return proxy;
        }
    } catch (e) {
        return proxy;
    }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    console.log(colors.bold.green('=== –ü–ï–†–ï–í–Ü–†–ö–ê –ü–†–û–ö–°–Ü-–°–ï–†–í–ï–†–Ü–í ==='));
    const date = new Date();
    console.log(`–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`);
    console.log(`RPC URL: ${config.RPC_URL}`);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    const proxies = config.PROXIES || [];
    
    if (proxies.length === 0) {
        console.log(colors.red('\n‚ùå –£ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∞'));
        return;
    }
    
    console.log(`\n‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ${proxies.length} –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä—ñ–≤...`);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    const results = [];
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –ø—Ä–æ–∫—Å—ñ
    for (let i = 0; i < proxies.length; i++) {
        const result = await checkProxy(proxies[i], i);
        results.push(result);
        
        // –ù–µ–≤–µ–ª–∏—á–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –º–µ—Ä–µ–∂—É
        if (i < proxies.length - 1) {
            await sleep(500);
        }
    }
    
    // –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log(colors.bold.green('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–ï–†–ï–í–Ü–†–ö–ò –ü–†–û–ö–°–Ü ==='));
    
    // –¢–∞–±–ª–∏—Ü—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    console.log('+---------+-------------------------------------+-------------+---------------+');
    console.log('| ' + colors.cyan('‚Ññ') + '       | ' + colors.cyan('–ü—Ä–æ–∫—Å—ñ') + '                              | ' + colors.cyan('–°—Ç–∞—Ç—É—Å') + '     | ' + colors.cyan('–ß–∞—Å (ms)') + '     |');
    console.log('+---------+-------------------------------------+-------------+---------------+');
    
    results.forEach(result => {
        const statusColor = result.status === 'OK' ? colors.green : colors.red;
        console.log(
            `| ${colors.yellow(String(result.index + 1).padEnd(7))} | ` +
            `${formatProxyUrl(result.proxy).padEnd(35)} | ` +
            `${statusColor(result.status.padEnd(11))} | ` +
            `${result.responseTime ? String(result.responseTime).padEnd(13) : 'N/A'.padEnd(13)} |`
        );
    });
    
    console.log('+---------+-------------------------------------+-------------+---------------+');
    
    // –ü—ñ–¥—Å—É–º–æ–∫
    const workingProxies = results.filter(r => r.status === 'OK').length;
    console.log(`\n‚úÖ –ü—Ä–∞—Ü—é—é—á–∏—Ö –ø—Ä–æ–∫—Å—ñ: ${colors.green(workingProxies)} –∑ ${results.length}`);
    
    if (workingProxies === 0) {
        console.log(colors.red('\n‚ùå –£–í–ê–ì–ê! –ñ–æ–¥–µ–Ω –ø—Ä–æ–∫—Å—ñ –Ω–µ –ø—Ä–∞—Ü—é—î! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–≤—è–∑–∞–Ω–Ω—è.'));
    } else if (workingProxies < results.length) {
        console.log(colors.yellow(`\n‚ö†Ô∏è ${results.length - workingProxies} –ø—Ä–æ–∫—Å—ñ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.`));
    } else {
        console.log(colors.green('\n‚úÖ –í—Å—ñ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ!'));
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
main().catch(error => {
    console.error(colors.red(`\n‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${error.message}`));
    process.exit(1);
}); 