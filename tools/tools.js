const colors = require('colors');
const { spawn } = require('child_process');
const prompts = require('prompts');
const path = require('path');

// –®–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É
const rootDir = path.resolve(__dirname, '..');

// –ú–∞—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
const tools = [
    { title: 'üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ –≥–∞–º–∞–Ω—Ü—ñ', value: 'check-wallets', command: 'node tools/check-wallets.js' },
    { title: 'üí∞ –ü–µ—Ä–µ–∑–∞–ø—Ä–∞–≤–∏—Ç–∏ –≥–∞–º–∞–Ω—Ü—ñ', value: 'refill-wallets', command: 'node tools/refill-wallets.js' },
    { title: 'üîå –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∏', value: 'proxy-check', command: 'node tools/proxy-check.js' },
    { title: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç', value: 'main', command: 'node main.js' },
    { title: '‚öôÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Rubic –º–æ–¥—É–ª—å', value: 'rubic', command: 'node scripts/rubic-multi.js' },
    { title: '‚öôÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Magma –º–æ–¥—É–ª—å', value: 'magma', command: 'node scripts/magma-multi.js' },
    { title: '‚öôÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Izumi –º–æ–¥—É–ª—å', value: 'izumi', command: 'node scripts/izumi-multi.js' },
    { title: '‚öôÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ aPriori –º–æ–¥—É–ª—å', value: 'apriori', command: 'node scripts/apriori-multi.js' },
    { title: 'üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏', value: 'return', command: null }
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
async function executeCommand(command) {
    return new Promise((resolve) => {
        console.log(`\n${colors.cyan('–í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É:')} ${colors.yellow(command)}\n`);
        
        const process = spawn(command, { shell: true, stdio: 'inherit' });
        
        process.on('close', (code) => {
            if (code === 0) {
                console.log(`\n${colors.green('‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞')}`);
            } else {
                console.log(`\n${colors.red(`‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏: ${code}`)}`);
            }
            resolve();
        });
    });
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
    let returnToMenu = false;
    
    while (true) {
        console.clear();
        console.log('\n' + colors.bold.green('=== –ú–û–ù–ê–î - –Ü–ù–°–¢–†–£–ú–ï–ù–¢–ò ==='));
        console.log(colors.yellow(`–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${new Date().toLocaleString()}`));
        
        const choices = [...tools];
        if (!returnToMenu) {
            // –í–∏–¥–∞–ª—è—î–º–æ –æ–ø—Ü—ñ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∞ —â–µ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞
            choices.pop();
        }
        
        choices.push({ title: '‚ùå –í–∏—Ö—ñ–¥', value: 'exit' });
        
        const response = await prompts({
            type: 'select',
            name: 'tool',
            message: '–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:',
            choices: choices,
            initial: 0
        });
        
        if (!response.tool || response.tool === 'exit') {
            console.log('\n' + colors.yellow('–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!'));
            break;
        }
        
        const selectedTool = tools.find(t => t.value === response.tool);
        
        if (response.tool === 'return') {
            returnToMenu = !returnToMenu;
            console.log(`\n${colors.cyan('–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é')} ${returnToMenu ? colors.green('–£–í–Ü–ú–ö–ù–ï–ù–û') : colors.red('–í–ò–ú–ö–ù–ï–ù–û')}`);
            await new Promise(resolve => setTimeout(resolve, 1500));
            continue;
        }
        
        await executeCommand(selectedTool.command);
        
        if (!returnToMenu) {
            console.log('\n' + colors.cyan('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é...'));
            await new Promise(resolve => {
                process.stdin.once('data', () => {
                    resolve();
                });
            });
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
main().catch((error) => {
    console.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:', error);
}); 