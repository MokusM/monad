/**
 * –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≥–∞–º–∞–Ω—Ü—è–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç—ñ Monad Multi Wallet Manager
 */

const ethers = require('ethers');
const colors = require('colors');

/**
 * –ü–µ—Ä–µ–º—ñ—à—É—î –º–∞—Å–∏–≤ –∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º Fisher-Yates
 * @param {Array} array - –º–∞—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è 
 * @param {string} seed - seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª
 * @returns {Array} - –ø–µ—Ä–µ–º—ñ—à–∞–Ω–∏–π –º–∞—Å–∏–≤
 */
function shuffleArray(array, seed = 'random') {
    const newArray = [...array]; // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –º–∞—Å–∏–≤—É, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ seed
    const randomGenerator = () => {
        if (seed === 'random') {
            return Math.random();
        } else {
            // –ü—Ä–æ—Å—Ç–∏–π –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—è–¥–∫–∞ seed
            let hash = 0;
            for (let i = 0; i < seed.length; i++) {
                hash = ((hash << 5) - hash) + seed.charCodeAt(i);
                hash |= 0; // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ 32-–±—ñ—Ç–Ω–µ —Ü—ñ–ª–µ
            }
            
            // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –¥–ª—è –±—ñ–ª—å—à–æ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ, –∞–ª–µ —è–∫—â–æ seed —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π, 
            // —Ç–æ –±—É–¥–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å, —â–æ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è, –∞ –Ω–µ –∑–∞–≤–∂–¥–∏ –æ–¥–Ω–∞ –π —Ç–∞ –∂
            const currentTimestamp = Date.now(); 
            return Math.abs(Math.sin(hash + currentTimestamp)) % 1;
        }
    };
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º Fisher-Yates shuffle
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(randomGenerator() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    
    return newArray;
}

/**
 * –û—Ç—Ä–∏–º—É—î –ø–µ—Ä–µ–º—ñ—à–∞–Ω–∏–π (–∞–±–æ –Ω—ñ) –Ω–∞–±—ñ—Ä –≥–∞–º–∞–Ω—Ü—ñ–≤ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
 * @param {Object} config - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π –æ–±'—î–∫—Ç
 * @returns {Object} - { wallets, proxies } –º–∞—Å–∏–≤–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∫–ª—é—á—ñ–≤ —Ç–∞ –ø—Ä–æ–∫—Å—ñ
 */
function getWallets(config) {
    const wallets = config.WALLETS || [];
    const proxies = config.PROXIES || [];
    
    if (wallets.length === 0) {
        console.log('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó'.red);
        return { wallets: [], proxies: [] };
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞—Ç–∏ –≥–∞–º–∞–Ω—Ü—ñ
    if (config.PRIVACY && config.PRIVACY.SHUFFLE_WALLETS) {
        const seed = config.PRIVACY.SHUFFLE_SEED || 'random';
        console.log(`üîÄ ${colors.cyan('–ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –≥–∞–º–∞–Ω—Ü—ñ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ')} (${seed !== 'random' ? '–¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ' : '–≤–∏–ø–∞–¥–∫–æ–≤–æ'})`);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∏ [–≥–∞–º–∞–Ω–µ—Ü—å, –ø—Ä–æ–∫—Å—ñ] –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        const pairs = wallets.map((wallet, index) => ({
            wallet,
            proxy: proxies[index % proxies.length]
        }));
        
        // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –ø–∞—Ä–∏
        const shuffledPairs = shuffleArray(pairs, seed);
        
        // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞–∑–∞–¥ –Ω–∞ –º–∞—Å–∏–≤–∏
        const shuffledWallets = shuffledPairs.map(pair => pair.wallet);
        const shuffledProxies = shuffledPairs.map(pair => pair.proxy);
        
        return { wallets: shuffledWallets, proxies: shuffledProxies };
    }
    
    return { wallets, proxies };
}

/**
 * –§–æ—Ä–º–∞—Ç—É—î –∞–¥—Ä–µ—Å—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è (—Å–∫–æ—Ä–æ—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞)
 * @param {string} address - Ethereum –∞–¥—Ä–µ—Å–∞
 * @returns {string} - —Å–∫–æ—Ä–æ—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –∞–¥—Ä–µ—Å–∏
 */
function formatAddress(address) {
    if (!address) return '';
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
}

/**
 * –§–æ—Ä–º–∞—Ç—É—î —á–∏—Å–ª–æ –∑ –æ–±–º–µ–∂–µ–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤
 * @param {number|string|BigNumber} value - –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
 * @param {number} decimals - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤
 * @returns {string} - —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —á–∏—Å–ª–æ
 */
function formatNumber(value, decimals = 4) {
    if (!value) return '0'.padEnd(decimals + 2, '0');
    
    // –Ø–∫—â–æ —Ü–µ BigNumber, –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ä—è–¥–æ–∫, –∞ –ø–æ—Ç—ñ–º –≤ —á–∏—Å–ª–æ
    if (typeof value === 'object' && value._isBigNumber) {
        value = parseFloat(ethers.utils.formatEther(value));
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä—è–¥–æ–∫ –≤ —á–∏—Å–ª–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (typeof value === 'string') {
        value = parseFloat(value);
    }
    
    // –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∏—Å–ª–æ
    return value.toFixed(decimals);
}

/**
 * –î–æ–¥–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É
 * @param {number} minMs - –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—Å
 * @param {number} maxMs - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—Å
 * @returns {Promise} - –ø—Ä–æ–º—ñ—Å, —è–∫–∏–π –≤–∏—Ä—ñ—à—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏
 */
function randomDelay(minMs = 500, maxMs = 2500) {
    const delay = Math.floor(Math.random() * (maxMs - minMs)) + minMs;
    return new Promise(resolve => setTimeout(resolve, delay));
}

module.exports = {
    shuffleArray,
    getWallets,
    formatAddress,
    formatNumber,
    randomDelay
}; 